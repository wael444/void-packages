# based on PKGBUILD from Tk-Glitch <ti3nou@gmail.com>
msg2() {
 echo -e " \033[1;34m->\033[1;0m \033[1;1m$1\033[1;0m" >&2
}

error() {
 echo -e " \033[1;31m==> ERROR: $1\033[1;0m" >&2
}

warning() {
 echo -e " \033[1;33m==> WARNING: $1\033[1;0m" >&2
}

plain() {
 echo "$1" >&2
}

create_wrksrc=yes
wrksrc=linux-tkg
_where="${XBPS_BUILDDIR}/${wrksrc}/linux-tkg"
srcdir="${XBPS_BUILDDIR}/${wrksrc}"
_files="${XBPS_SRCPKGDIR}/linux-tkg/files"

if [ ! -e ${srcdir} ]; then
	mkdir ${srcdir}
fi

if [ ! -e ${srcdir}/linux-tkg ]; then
	cd ${srcdir}
	git clone https://github.com/Frogging-Family/linux-tkg.git
	if [ -e ${_files}/mypatches/* ]; then
		cp ${_files}/mypatches/* ${_where}
	fi
fi

source ${_files}/customization.cfg
source ${_where}/linux-tkg-config/prepare
if [ ! -e ${srcdir}/run_check ]; then
  _tkg_initscript
  _compiler_opt=${_compileropt}
  echo _compiler_opt="\"$_compileropt\"" >> "${srcdir}/compilerset"
fi
touch ${srcdir}/run_check
source ${srcdir}/cpuschedset
source ${srcdir}/compilerset
source ${srcdir}/versel
# Template file for 'linux${_basever}-tkg-${_cpusched}${_compiler_name}'
pkgname=linux${_basever}-tkg-${_cpusched}${_compiler_name}
revision=8
archs="x86_64" # PKGBUILD declares x86_64 only
python_version=3
patch_args="-Np1"
hostmakedepends="schedtool xmlto libressl-devel docbook-xsl kmod inetutils bc libelf patchutils flex python3-Sphinx python3-sphinx_rtd_theme graphviz perl uboot-mkimage cpio gmp-devel libmpc-devel elfutils-devel pahole git"
makedepends="xz modprobed-db"
triggers="kernel-hooks"

if [[ "$_sub" = rc* ]]; then
  # xbps forces 3 digits in version for kernel
  version=${_basekernel}.0
  _rc_kern_ver=${_basekernel}-${_sub}
  _kern_ver_path=${_basekernel}-${_sub}
  _kern_ver_dir=${version}-${_sub}
  _kern_ver=${version}
  kernel_site="https://git.kernel.org/torvalds/t/linux-${_rc_kern_ver}.tar.gz"
else
  version=${_basekernel}.${_sub}
  if [ "$_sub" != "0" ]; then
    _kern_ver=${_basekernel}.${_sub}
    _kern_ver_path=${_basekernel}.${_sub}
  else
    _kern_ver=${_basekernel}
    _kern_ver_path=${_basekernel}
  fi
  _kern_ver_dir=${version}
  kernel_site="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-${_kern_ver}.tar.xz"
fi

_kernver="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
kernel_hooks_version="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
_make_kernver="-tkg-${_cpusched}${_compiler_name}_${revision}"
short_desc="Linux-tkg"
maintainer="Hyper-KVM <hyperkvmx86@gmail.com>"
license="GPL-2.0-only"
homepage="http://www.kernel.org"

case $_basever in
        54)
	opt_ver="4.19-v5.4"
	cpu_opt_sum='27b7fc535ade94b636c3ec4e809e141831e9465a0ef55215a9852b87048629e2'
	kernel_sum='5a424b403b726bbe7dfa1d1524e431676c4a64f22a8db524534ed678bfe576b2'
        source=('config.x86_64' # stock Arch config
                'config_hardened.x86_64' # hardened Arch config
                90-cleanup.hook
                cleanup
                # ARCH Patches
                0001-add-sysctl-to-disallow-unprivileged-CLONE_NEWUSER-by.patch
                # TkG
                0002-clear-patches.patch
                0003-glitched-base.patch
                0003-glitched-cfs.patch
                0004-glitched-ondemand-muqss.patch
                0004-glitched-muqss.patch
                0004-5.4-ck1.patch
                0005-glitched-ondemand-pds.patch
                0005-glitched-pds.patch
                0005-v5.4_undead-pds099o.patch
                0006-add-acs-overrides_iommu.patch
                0007-v5.4-fsync.patch
                #0008-5.4-bcachefs.patch
                0009-glitched-bmq.patch
                0009-bmq_v5.4-r2.patch
                0011-ZFS-fix.patch
                0012-linux-hardened.patch
        )
        sha256sums=('55dd5117c1da17c9ec38d7bc995958958bcc8b7ebcfd81de1d4c7650b85537ab'
            '1f4a20d6eaaa0d969af93152a65191492400c6aa838fc1c290b0dd29bb6019d8'
            '1e15fc2ef3fa770217ecc63a220e5df2ddbcf3295eb4a021171e7edd4c6cc898'
            '66a03c246037451a77b4d448565b1d7e9368270c7d02872fbd0b5d024ed0a997'
            '31dc68e84aecfb7d069efb1305049122c65694676be8b955634abcf0675922a2'
            'd02bf5ca08fd610394b9d3a0c3b176d74af206f897dee826e5cbaec97bb4a4aa'
            '156a2c75fd228920e3c3da5e04a110afa403951bdfbb85772c2fd4b82fd24d61'
            '7058e57fd68367b029adc77f2a82928f1433daaf02c8c279cb2d13556c8804d7'
            'c605f638d74c61861ebdc36ebd4cb8b6475eae2f6273e1ccb2bbb3e10a2ec3fe'
            'bc69d6e5ee8172b0242c8fa72d13cfe2b8d2b6601468836908a7dfe8b78a3bbb'
            '815974c65f47301d2a5d1577bf95e8a4b54cad7d77f226e0065f83e763837c48'
            '62496f9ca788996181ef145f96ad26291282fcc3fb95cdc04080dcf84365be33'
            'eac7e5d6201528e64f4bdf5e286c842511e1afc52e1518dc8e7d11932bbe0a99'
            'db03fbd179ec78941eefe1c0edde4c19071bc603511d0b5c06c04e412994b62e'
            '19661ec0d39f9663452b34433214c755179894528bf73a42f6ba52ccf572832a'
            '2d9260b80b43bbd605cf420d6bd53aa7262103dfd77196ba590ece5600b6dc0d'
            '3832f828a9f402b153fc9a6829c5a4eaf6091804bcda3a0423c8e1b57e26420d'
            '6a6a736cf1b3513d108bfd36f60baf50bb36b33aec21ab0d0ffad13602b7ff75'
            '49262ce4a8089fa70275aad742fc914baa28d9c384f710c9a62f64796d13e104'
            'aeb31404c26ee898d007b1f66cb9572c9884ad8eca14edc4587d68f6cba6de46')
        ;;
        57)
        opt_ver="5.7+"
	cpu_opt_sum='1f56a2466bd9b4477925682d8f944fabb38727140e246733214fe50aa326fc47'
	kernel_sum='419c6248b9ae4dfead4599787aecbfd202e88bc4124523adfa6dd2d642b99fe7'
        source=('config.x86_64' # stock Arch config
                'config_hardened.x86_64' # hardened Arch config
                90-cleanup.hook
                cleanup
                # ARCH Patches
                0001-add-sysctl-to-disallow-unprivileged-CLONE_NEWUSER-by.patch
                # TkG
                0002-clear-patches.patch
                0003-glitched-base.patch
                0003-glitched-cfs.patch
                0004-glitched-ondemand-muqss.patch
                0004-glitched-muqss.patch
                0004-5.7-ck1.patch
                0005-glitched-ondemand-pds.patch
                0005-glitched-pds.patch
                0005-v5.7_undead-pds099o.patch
                0006-add-acs-overries_iommu.patch
                0007-v5.7-fsync.patch
                0008-5.7-bcachefs.patch
                0009-glitched-ondemand-bmq.patch
                0009-glitched-bmq.patch
                0009-prjc_v5.7-r3.patch
                0011-ZFS-fix.patch
                0012-linux-hardened.patch
                0012-misc-additions.patch
        )
        sha256sums=('6313ccad7f8e4d8ce09dd5bdb51b8dfa124d0034d7097ba47008380a14a84f09'
            '15ce09447b7e9b28425c1df5961c955378f2829e4115037337eef347b1db3d9d'
            '1e15fc2ef3fa770217ecc63a220e5df2ddbcf3295eb4a021171e7edd4c6cc898'
            '66a03c246037451a77b4d448565b1d7e9368270c7d02872fbd0b5d024ed0a997'
            '31dc68e84aecfb7d069efb1305049122c65694676be8b955634abcf0675922a2'
            'd02bf5ca08fd610394b9d3a0c3b176d74af206f897dee826e5cbaec97bb4a4aa'
            'bbf332201423888257c9687bee06916a5dbbac2194f9df5b4126100c40e48d16'
            '7058e57fd68367b029adc77f2a82928f1433daaf02c8c279cb2d13556c8804d7'
            'c605f638d74c61861ebdc36ebd4cb8b6475eae2f6273e1ccb2bbb3e10a2ec3fe'
            'bc69d6e5ee8172b0242c8fa72d13cfe2b8d2b6601468836908a7dfe8b78a3bbb'
            '8d8aec86e34dbec6cc3a47f2cd55dc9212e95d36b6cd34d6e637c66731e7d838'
            '62496f9ca788996181ef145f96ad26291282fcc3fb95cdc04080dcf84365be33'
            '7fd8e776209dac98627453fda754bdf9aff4a09f27cb0b3766d7983612eb3c74'
            '55be5e4c6254da0a9d34bbfac807a70d8b58b3f7b2ec852026195c4db5e263e2'
            '19661ec0d39f9663452b34433214c755179894528bf73a42f6ba52ccf572832a'
            'cd225e86d72eaf6c31ef3d7b20df397f4cc44ddd04389850691292cdf292b204'
            'd2214504c43f9d297a8ef68dffc198143bfebf85614b71637a71978d7a86bd78'
            '9fad4a40449e09522899955762c8928ae17f4cdaa16e01239fd12592e9d58177'
            '965a517a283f265a012545fbb5cc9e516efc9f6166d2aa1baf7293a32a1086b7'
            'b2a2ae866fc3f1093f67e69ba59738827e336b8f800fb0487599127f7f3ef881'
            '49262ce4a8089fa70275aad742fc914baa28d9c384f710c9a62f64796d13e104'
            '6821f92bd2bde3a3938d17b070d70f18a2f33cae81647567b5a4d94c9cd75f3d'
            'bdc60c83cd5fbf9912f9201d6e4fe3c84fe5f634e6823bd8e78264ad606b3a9e')
        ;;
        58)
        opt_ver="5.8+"
	cpu_opt_sum='5ab29eb64e57df83b395a29a6a4f89030d142feffbfbf73b3afc6d97a2a7fd12'
	kernel_sum='568464fce14e8dd070c8f7249dfbdfbe11c87612dfd08520fb73d359b3de3c03'
        source=(config.x86_64 # stock Arch config
                #config_hardened.x86_64 # hardened Arch config
                90-cleanup.hook
                cleanup
                # ARCH Patches
                0001-add-sysctl-to-disallow-unprivileged-CLONE_NEWUSER-by.patch
                # TkG
                0002-clear-patches.patch
                0003-glitched-base.patch
                0003-glitched-cfs.patch
                #0004-glitched-ondemand-muqss.patch
                #0004-glitched-muqss.patch
                #0004-5.8-ck1.patch
                0005-undead-glitched-ondemand-pds.patch
                0005-undead-glitched-pds.patch
                0005-v5.8_undead-pds099o.patch
                0005-glitched-pds.patch
                0006-add-acs-overrides_iommu.patch
                0007-v5.8-fsync.patch
                0008-5.8-bcachefs.patch
                0009-glitched-ondemand-bmq.patch
                0009-glitched-bmq.patch
                0009-prjc_v5.8-r3.patch
                0011-ZFS-fix.patch
                #0012-linux-hardened.patch
                0012-misc-additions.patch
        )
        sha256sums=('ac66686b0e1ed057ea5f099cd00366decc00f999aa1cb19ba8d3ccf9f92d60e2'
            '1e15fc2ef3fa770217ecc63a220e5df2ddbcf3295eb4a021171e7edd4c6cc898'
            '66a03c246037451a77b4d448565b1d7e9368270c7d02872fbd0b5d024ed0a997'
            'f6383abef027fd9a430fd33415355e0df492cdc3c90e9938bf2d98f4f63b32e6'
            '35a7cde86fb94939c0f25a62b8c47f3de0dbd3c65f876f460b263181b3e92fc0'
            'b9ebe0ae69bc2b2091d6bfcf6c7875a87ea7969fcfa4e306c48d47a60f9ef4d6'
            '7058e57fd68367b029adc77f2a82928f1433daaf02c8c279cb2d13556c8804d7'
            '62496f9ca788996181ef145f96ad26291282fcc3fb95cdc04080dcf84365be33'
            '7fd8e776209dac98627453fda754bdf9aff4a09f27cb0b3766d7983612eb3c74'
            '31b172eb6a0c635a8d64cc1c2e8181d9f928ee991bd44f6e556d1713b815f8d9'
            '87bca363416655bc865fcb2cc0d1532cb010a61d9b9f625e3c15cd12eeee3a59'
            '19661ec0d39f9663452b34433214c755179894528bf73a42f6ba52ccf572832a'
            'cd225e86d72eaf6c31ef3d7b20df397f4cc44ddd04389850691292cdf292b204'
            '86414a20225deec084e0e48b35552b3a4eef67f76755b32a10febb7b6308dcb7'
            '9fad4a40449e09522899955762c8928ae17f4cdaa16e01239fd12592e9d58177'
            '965a517a283f265a012545fbb5cc9e516efc9f6166d2aa1baf7293a32a1086b7'
            'f5dbff4833a2e3ca94c202e5197894d5f1006c689ff149355353e77d2e17c943'
            '49262ce4a8089fa70275aad742fc914baa28d9c384f710c9a62f64796d13e104'
            '98311deeb474b39e821cd1e64198793d5c4d797155b3b8bbcb1938b7f11e8d74')
        ;;
        59)
        opt_ver="5.8+"
	cpu_opt_sum='5ab29eb64e57df83b395a29a6a4f89030d142feffbfbf73b3afc6d97a2a7fd12'
	kernel_sum='51f4eced91a95206946a0f1449e3f883bb3b300baa2f7f493e4c899a7d640236'
        source=("config.x86_64" # stock Arch config
                #$hardened_config_file # hardened Arch config
                90-cleanup.hook
                cleanup
                # ARCH Patches
                0001-add-sysctl-to-disallow-unprivileged-CLONE_NEWUSER-by.patch
                # TkG
                0002-clear-patches.patch
                0003-glitched-base.patch
                0003-glitched-cfs.patch
                0004-glitched-ondemand-muqss.patch
                0004-glitched-muqss.patch
                0004-5.9-ck1.patch
                #0005-undead-glitched-ondemand-pds.patch
                #0005-undead-glitched-pds.patch
                #0005-v5.8_undead-pds099o.patch
                0005-glitched-pds.patch
                0006-add-acs-overrides_iommu.patch
                0007-v5.9-fsync.patch
                0008-5.9-bcachefs.patch
                0009-glitched-ondemand-bmq.patch
                0009-glitched-bmq.patch
                0009-prjc_v5.9-r1.patch
                0011-ZFS-fix.patch
                #0012-linux-hardened.patch
                0012-misc-additions.patch
        )
        sha256sums=('9bb2762ba80f7f38bf067c968badda9671fd1b7749274105569cda30b1ae820d'
            '1e15fc2ef3fa770217ecc63a220e5df2ddbcf3295eb4a021171e7edd4c6cc898'
            '66a03c246037451a77b4d448565b1d7e9368270c7d02872fbd0b5d024ed0a997'
            'f6383abef027fd9a430fd33415355e0df492cdc3c90e9938bf2d98f4f63b32e6'
            '35a7cde86fb94939c0f25a62b8c47f3de0dbd3c65f876f460b263181b3e92fc0'
            '902885088ed0748e40372e04a8ec11adf5acf3d935abffc6737dd9e6ec13bb93'
            '7058e57fd68367b029adc77f2a82928f1433daaf02c8c279cb2d13556c8804d7'
            'c605f638d74c61861ebdc36ebd4cb8b6475eae2f6273e1ccb2bbb3e10a2ec3fe'
            '2bbbac963b6ca44ef3f8a71ec7c5cad7d66df860869a73059087ee236775970a'
            '45a9ab99215ab3313be6e66e073d29154aac55bc58975a4df2dad116c918d27c'
            'fca63d15ca4502aebd73e76d7499b243d2c03db71ff5ab0bf5cf268b2e576320'
            '19661ec0d39f9663452b34433214c755179894528bf73a42f6ba52ccf572832a'
            'b302ba6c5bbe8ed19b20207505d513208fae1e678cf4d8e7ac0b154e5fe3f456'
            '78373044a416c512d74a1fb0227cbc2e4a47023791e21e2536626fce9401fbf7'
            '9fad4a40449e09522899955762c8928ae17f4cdaa16e01239fd12592e9d58177'
            'a557b342111849a5f920bbe1c129f3ff1fc1eff62c6bd6685e0972fc88e39911'
            'a5149d7220457d30e03e6999f35a050bce46acafc6230bfe6b4d4994c523516d'
            '49262ce4a8089fa70275aad742fc914baa28d9c384f710c9a62f64796d13e104'
            '433b919e6a0be26784fb4304c43b1811a28f12ad3de9e26c0af827f64c0c316e')
        ;;
        510)
        opt_ver="5.8+"
	cpu_opt_sum='5ab29eb64e57df83b395a29a6a4f89030d142feffbfbf73b3afc6d97a2a7fd12'
	kernel_sum='483d8b3945963ea375026c4dde019da36f5d2116241036b09493e63e92e39ee8'
        source=("config.x86_64" # stock Arch config
                #$hardened_config_file # hardened Arch config
                90-cleanup.hook
                cleanup
                # ARCH Patches
                0001-add-sysctl-to-disallow-unprivileged-CLONE_NEWUSER-by.patch
                # TkG
                0002-clear-patches.patch
                0003-glitched-base.patch
                0003-glitched-cfs.patch
                0004-glitched-ondemand-muqss.patch
                0004-glitched-muqss.patch
                0004-5.10-ck1.patch
                #0005-undead-glitched-ondemand-pds.patch
                #0005-undead-glitched-pds.patch
                #0005-v5.8_undead-pds099o.patch
                0005-glitched-pds.patch
                0006-add-acs-overrides_iommu.patch
                0007-v5.10-fsync.patch
                #0008-5.10-bcachefs.patch
                0009-glitched-ondemand-bmq.patch
                0009-glitched-bmq.patch
                0009-prjc_v5.10-r0.patch
                0011-ZFS-fix.patch
                #0012-linux-hardened.patch
                0012-misc-additions.patch
        )
        sha256sums=('834247434877e4e76201ada7df35ebd4622116737e9650e0772f22d03083b426'
            '1e15fc2ef3fa770217ecc63a220e5df2ddbcf3295eb4a021171e7edd4c6cc898'
            '66a03c246037451a77b4d448565b1d7e9368270c7d02872fbd0b5d024ed0a997'
            'f6383abef027fd9a430fd33415355e0df492cdc3c90e9938bf2d98f4f63b32e6'
            '35a7cde86fb94939c0f25a62b8c47f3de0dbd3c65f876f460b263181b3e92fc0'
            '1ac97da07e72ec7e2b0923d32daacacfaa632a44c714d6942d9f143fe239e1b5'
            '7058e57fd68367b029adc77f2a82928f1433daaf02c8c279cb2d13556c8804d7'
            'c605f638d74c61861ebdc36ebd4cb8b6475eae2f6273e1ccb2bbb3e10a2ec3fe'
            '2bbbac963b6ca44ef3f8a71ec7c5cad7d66df860869a73059087ee236775970a'
            '4231bd331289f5678b49d084698f0a80a3ae602eccb41d89e4f85ff4465eb971'
            'fca63d15ca4502aebd73e76d7499b243d2c03db71ff5ab0bf5cf268b2e576320'
            '19661ec0d39f9663452b34433214c755179894528bf73a42f6ba52ccf572832a'
            'b302ba6c5bbe8ed19b20207505d513208fae1e678cf4d8e7ac0b154e5fe3f456'
            '9fad4a40449e09522899955762c8928ae17f4cdaa16e01239fd12592e9d58177'
            'a557b342111849a5f920bbe1c129f3ff1fc1eff62c6bd6685e0972fc88e39911'
            'a5149d7220457d30e03e6999f35a050bce46acafc6230bfe6b4d4994c523516d'
            '49262ce4a8089fa70275aad742fc914baa28d9c384f710c9a62f64796d13e104'
            '433b919e6a0be26784fb4304c43b1811a28f12ad3de9e26c0af827f64c0c316e')
       ;;
esac

# sums check
if [ ! -e ${srcdir}/sum_check ]; then
	cd ${srcdir}
	for i in ${source[@]}; do
		sums+=($(sha256sum $i | cut -d' ' -f1))
	done

	for i in ${!sums[@]}; do
		if [ "${sums[$i]}" != "${sha256sums[$i]}" ] && [ ! -e ${srcdir}/sum_failed ] ;then
			error "sha256sum mismatch! ${source[$i]}"
			touch ${srcdir}/sum_failed
			exit 1
		elif [ ! -e ${srcdir}/sum_failed ]; then
			msg2 "Checking ${source[$i]} sum... OK"
		else
			error "Sum check failed! Will exit before build!"
			break
		fi
	done
	touch ${srcdir}/sum_check
fi

distfiles="${kernel_site}
https://raw.githubusercontent.com/graysky2/kernel_gcc_patch/master/enable_additional_cpu_optimizations_for_gcc_v10.1+_kernel_v${opt_ver}.patch"
checksum="${kernel_sum}
${cpu_opt_sum}"
nostrip=yes
noshlibprovides=yes
preserve=yes
nodebug=yes
if [ "$_compiler_name" = "-llvm" ]; then
  hostmakedepends+=" llvm clang lld libclang libclang-cpp"
fi

# These files could be modified when an external module is built.
mutable_files="
 /usr/lib/modules/${_kernver}/modules.builtin.bin
 /usr/lib/modules/${_kernver}/modules.builtin.alias.bin
 /usr/lib/modules/${_kernver}/modules.softdep
 /usr/lib/modules/${_kernver}/modules.dep
 /usr/lib/modules/${_kernver}/modules.dep.bin
 /usr/lib/modules/${_kernver}/modules.symbols
 /usr/lib/modules/${_kernver}/modules.symbols.bin
 /usr/lib/modules/${_kernver}/modules.alias
 /usr/lib/modules/${_kernver}/modules.alias.bin
 /usr/lib/modules/${_kernver}/modules.devname"

do_configure() {

  echo '       .---.`               `.---.'
  echo '    `/syhhhyso-           -osyhhhys/`'
  echo '   .syNMdhNNhss/``.---.``/sshNNhdMNys.'
  echo '   +sdMh.`+MNsssssssssssssssNM+`.hMds+'
  echo '   :syNNdhNNhssssssssssssssshNNhdNNys:'
  echo '    /ssyhhhysssssssssssssssssyhhhyss/'
  echo '    .ossssssssssssssssssssssssssssso.'
  echo '   :sssssssssssssssssssssssssssssssss:'
  echo '  /sssssssssssssssssssssssssssssssssss/'
  echo ' :sssssssssssssoosssssssoosssssssssssss:'
  echo ' osssssssssssssoosssssssoossssssssssssso'
  echo ' osssssssssssyyyyhhhhhhhyyyyssssssssssso'
  echo ' /yyyyyyhhdmmmmNNNNNNNNNNNmmmmdhhyyyyyy/'
  echo '  smmmNNNNNNNNNNNNNNNNNNNNNNNNNNNNNmmms'
  echo '   /dNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNd/'
  echo '    `:sdNNNNNNNNNNNNNNNNNNNNNNNNNds:`'
  echo '       `-+shdNNNNNNNNNNNNNNNdhs+-`'
  echo '             `.-:///////:-.`'

  if [ -n "$_custom_pkgbase" ]; then
    pkgbase="${_custom_pkgbase}"
  else
    pkgbase=linux"${_basever}"-tkg-"${_cpusched}${_compiler_name}"
  fi

  export KBUILD_BUILD_HOST=voidlinux
  export KBUILD_BUILD_USER=$pkgbase
  export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

  #srcdir="${XBPS_BUILDDIR}/${wrksrc}/linx-${_kern_ver}"
  _tkg_srcprep
}

do_build() {


echo "
                                                            /(#%%%%%%#*..,*(
                         .     ..,*****/////,.   .  ,/((((((####%%&#,.,,,,,/
        . .        ..  ,/((#################((##%&%/,./(((((####%/,##,,,,,*(
,  .*(%&&&&&%%###(((/,*(((%%#################(((((((#%&(*(((###*,#@@&%#(**/(
&%%%%%&&&&%%%%%%###(((((%%%%%#################((((((#####%###/,#@@@@@@@@@%// 
%%%%%%%&&%%%%%%%###((((#%%%%%%%%###############(((############%%%%%%%%%#**(   
%%%%%%%%%%%%%%#####(((#%%%%%%%%######%%%%%%%%%%%%#((##########%#/(#####%#*, 
..*/##############(((#%%%%%%%%#(###%%%%%%%%%%%%%%%#%#(#%%%%#####%%**#####&/,    
,,,.,*,..*/#####(((##%%%%%%%%##(###%%%%%%%%%%%%%%%%##%((#%&&%###%&&#.*###%@(
,,,,/#@@@@%(*,,/((#%%%%%%%%%#######%%%%%%%%%%%%%#%#(#%&#(//#%#((##((%(.*&&#.
,/&@@@@@@%##/,/(#######%%%#####(###(#%%%&%%%%##(/%&%(&&%///////(((((((&/ 
/#########/*#########((######(/*/#///#%(#&%///////////(&/*/////**((((((&( 
/****/##(*((########((%%(%%(///*./(////#(//////////////(//**/////,*(((/(&(
,/***(#**(((########//////////*..,((((((//////////////*%%#/.*((((/,,/((/(&*   
.******/(((########(/////////*,##*****/(((((((((////(,.((.,#/,((((/,****/##   
(,,***///*(###%%###(*//////**(#*,(####*.(((((((((((((((#*#%&%#//(((/,,*//(#   
%/,***#@@&/(#%%%%#%//////,*#%%&&&%(*..*(((/(#((((((((((/(%#(*,.      .,*///   
(,#@&&@@&(*(%%%%%##*///*/%%%%&&@@@@&%(//(///(#((((((((,  .(/*/(#%#/*, .*//*  
/,(((###%(/(%%%%%##,,,(%%%%%%#(/*,,.      .//##((((((,... ,#/*%&%%##* .,*/* 
*#/,#/(%#/(((#%%%&%,(#*       .**/#%%%%(**...,(#(((*...... .*#/*((((. ,,,/. 
#/ ,%#,*/((((/(##&&/,.  ........*(*(%&%%##,.../##(. ..........*((**. ...., 
   /@@/,((((((((/(&(.   ........ ./(**(##(..**((*/(..,,,,,,,,,,,**. ,&&&(.*.
   %@@(.*/(((//(((#%**. .......... .*(*,*,./#*/#&&%(* .,*******.   (@&&%..
        **/((((((((#%**  ,,,,,,,......,*,.#@@@@@@@@@&%#(/**/(#%#..%@@@%,,*&,.*..
            ((#(((####*((. .,,,,,,,,,,. *&@@@@@@@@@@@@@@@&&&&&%**&@@@%,.*./@&&&/
           ../#######%/*###/*.    .,/#@@@@@@@@@@@@&**&@@@&&&%,/@@@@%.  /@@@@&*.
               .,(####(*,...,,*/,/%&&&@@@(*&%/,//,,,(&@@&&&&%,,%####. /@@@@%,.
                    ,/(##/,,,****,(&&&&@@@@&&&&&@@@@@&&%%###,,###%%*#&##@#.,(
            ,  ./####%%%%%(,,,,,,,,#%&&&&&&&&&&&&&&&&%#,.#&%#/*,*/#%#(*, #
           .(%####%%%%%%%&&#,,,..,. *#%&&&&&&&&%#(*,.  .*#%&@@@@&, ./%&&(..
             *&&&&&@@@&&&&&&%**/***..,,..,*//.     .... .(/..  ./%@@@@&&&/ ,
                %@@@@@@@@@@@@@(*/****.  .,///*,. ,,...  /@@%(*,*#%%(*#@@&&&,.
"

  # Clang 10 can't handle these options
  if [ "$_compiler_name" = "-llvm" ]; then
    CFLAGS=${CFLAGS/-fstack-clash-protection -D_FORTIFY_SOURCE=2/}
  fi

  # remove mandatory -O2 flag
  CFLAGS=${CFLAGS/-O2/}
  CFLAGS+=" ${_compiler_opt}"

  cd ${wrksrc}/linux-${_kern_ver_path}

  # Use custom compiler paths if defined
  if [ "$_compiler_name" = "-llvm" ] && [ -n "${CUSTOM_LLVM_PATH}" ]; then
    PATH=${CUSTOM_LLVM_PATH}/bin:${CUSTOM_LLVM_PATH}/lib:${CUSTOM_LLVM_PATH}/include:${PATH}
  elif [ -n "${CUSTOM_GCC_PATH}" ]; then
    PATH=${CUSTOM_GCC_PATH}/bin:${CUSTOM_GCC_PATH}/lib:${CUSTOM_GCC_PATH}/include:${PATH}
  fi

  if [ "$_force_all_threads" == "true" ]; then
    _force_all_threads="-j$((`nproc`+1))"
  else
    _force_all_threads="${makejobs}"
  fi

  # ccache
  if [ "$_noccache" != "true" ] && xbps-query -s ccache &> /dev/null; then
    export PATH="/usr/lib/ccache/bin/:$PATH"
    export CCACHE_SLOPPINESS="file_macro,locale,time_macros"
    export CCACHE_NOHASHDIR="true"
    echo 'ccache was found and will be used'
  fi

  # build!
  _runtime=$( time ( schedtool -B -n 1 -e ionice -n 1 make ${llvm_opt} ${_force_all_threads} LOCALVERSION=${_make_kernver} bzImage modules 2>&1 ) 3>&1 1>&2 2>&3 ) || _runtime=$( time ( make ${llvm_opt} ${_force_all_threads} LOCALVERSION=${_make_kernver} bzImage modules 2>&1 ) 3>&1 1>&2 2>&3 )

  if [ -n "$_runtime" ]; then
    printf "compilation time : \n$_runtime"
  fi
}

do_install() {
	
	cd ${wrksrc}/linux-${_kern_ver_path}

	local arch subarch _args hdrdest

  	echo "Installing modules..."
  	make INSTALL_MOD_PATH="$DESTDIR" modules_install

  	hdrdest=${DESTDIR}/usr/src/kernel-headers-${_kernver}

  	vinstall .config 644 boot config-${_kernver}
  	vinstall System.map 644 boot System.map-${_kernver}
  	vinstall arch/x86/boot/bzImage 644 boot vmlinuz-${_kernver}

	# Switch to /usr.
        vmkdir usr
        mv ${DESTDIR}/lib ${DESTDIR}/usr

	
        cd ${DESTDIR}/usr/lib/modules/${_kernver}
        rm -f source build
        ln -sf ../../../src/kernel-headers-${_kernver} build

        cd ${wrksrc}/linux-${_kern_ver_path}
        # Install required headers to build external modules
        install -Dm644 Makefile ${hdrdest}/Makefile
        install -Dm644 kernel/Makefile ${hdrdest}/kernel/Makefile
        install -Dm644 .config ${hdrdest}/.config
        for file in $(find . -name Kconfig\*); do
                mkdir -p ${hdrdest}/$(dirname $file)
                install -Dm644 $file ${hdrdest}/${file}
        done
        for file in $(find arch/${subarch:-$arch} -name module.lds -o -name Kbuild.platforms -o -name Platform); do
                mkdir -p ${hdrdest}/$(dirname $file)
                install -Dm644 $file ${hdrdest}/${file}
        done
        mkdir -p ${hdrdest}/include
        # Remove firmware stuff provided by the "linux-firmware" pkg.
        rm -rf ${DESTDIR}/usr/lib/firmware

        for i in acpi asm-generic clocksource config crypto drm generated linux \
                math-emu media net pcmcia scsi sound trace uapi vdso video xen dt-bindings; do
                if [ -d include/$i ]; then
                        cp -a include/$i ${hdrdest}/include
                fi
        done

	cd ${wrksrc}/linux-${_kern_ver_path}
        mkdir -p ${hdrdest}/arch/x86
        cp -a arch/x86/include ${hdrdest}/arch/x86

	# Copy files necessary for later builds, like nvidia and vmware

	 cp Module.symvers ${hdrdest}
        cp -a scripts ${hdrdest}
        mkdir -p ${hdrdest}/security/selinux
        cp -a security/selinux/include ${hdrdest}/security/selinux
        mkdir -p ${hdrdest}/tools/include
        cp -a tools/include/tools ${hdrdest}/tools/include

        mkdir -p ${hdrdest}/arch/x86/kernel
        cp arch/x86/Makefile ${hdrdest}/arch/x86
        mkdir -p ${hdrdest}/arch/x86/kernel
        cp arch/x86/kernel/asm-offsets.s ${hdrdest}/arch/x86/kernel

	 # add headers for lirc package
        # pci
        for i in bt8xx cx88 saa7134; do
                mkdir -p ${hdrdest}/drivers/media/pci/${i}
                cp -a drivers/media/pci/${i}/*.h ${hdrdest}/drivers/media/pci/${i}
        done
        # usb
        for i in cpia2 em28xx pwc; do
                mkdir -p ${hdrdest}/drivers/media/usb/${i}
                cp -a drivers/media/usb/${i}/*.h ${hdrdest}/drivers/media/usb/${i}
        done
        # i2c
        mkdir -p ${hdrdest}/drivers/media/i2c
        cp drivers/media/i2c/*.h ${hdrdest}/drivers/media/i2c
        for i in cx25840; do
                mkdir -p ${hdrdest}/drivers/media/i2c/${i}
                cp -a drivers/media/i2c/${i}/*.h ${hdrdest}/drivers/media/i2c/${i}
        done

        # Add md headers
        mkdir -p ${hdrdest}/drivers/md
        cp drivers/md/*.h ${hdrdest}/drivers/md

        # Add inotify.h
        mkdir -p ${hdrdest}/include/linux
        cp include/linux/inotify.h ${hdrdest}/include/linux

        # Add wireless headers
	mkdir -p ${hdrdest}/net/mac80211/
        cp net/mac80211/*.h ${hdrdest}/net/mac80211

        # add dvb headers for external modules
        mkdir -p ${hdrdest}/include/config/dvb/
        cp include/config/dvb/*.h ${hdrdest}/include/config/dvb/

        # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
        mkdir -p ${hdrdest}/drivers/media/dvb-frontends
        cp drivers/media/dvb-frontends/lgdt330x.h \
                ${hdrdest}/drivers/media/dvb-frontends/
        cp drivers/media/i2c/msp3400-driver.h ${hdrdest}/drivers/media/i2c/

        # add dvb headers
        mkdir -p ${hdrdest}/drivers/media/usb/dvb-usb
        cp drivers/media/usb/dvb-usb/*.h ${hdrdest}/drivers/media/usb/dvb-usb/
        mkdir -p ${hdrdest}/drivers/media/dvb-frontends
        cp drivers/media/dvb-frontends/*.h ${hdrdest}/drivers/media/dvb-frontends/
        mkdir -p ${hdrdest}/drivers/media/tuners
        cp drivers/media/tuners/*.h ${hdrdest}/drivers/media/tuners/

        # Add xfs and shmem for aufs building
        mkdir -p ${hdrdest}/fs/xfs/libxfs
        mkdir -p ${hdrdest}/mm
        cp fs/xfs/libxfs/xfs_sb.h ${hdrdest}/fs/xfs/libxfs/xfs_sb.h

	 # Add objtool binary, needed to build external modules with dkms
        mkdir -p ${hdrdest}/tools/objtool
        cp tools/objtool/objtool ${hdrdest}/tools/objtool

	# Remove unneeded architectures
        for arch in alpha avr32 blackfin cris frv h8300 \
                ia64 m* s* um v850 xtensa "arm* p*"; do
                rm -rf ${hdrdest}/arch/${arch}
        done

	# Keep arch/x86/ras/Kconfig as it is needed by drivers/ras/Kconfig
        mkdir -p ${hdrdest}/arch/x86/ras
        cp -a arch/x86/ras/Kconfig ${hdrdest}/arch/x86/ras/Kconfig

	 # Extract debugging symbols and compress modules
        msg_normal "$pkgver: extracting debug info and compressing modules, please wait...\n"
        install -Dm644 vmlinux ${DESTDIR}/usr/lib/debug/boot/vmlinux-${_kernver}
        (
        cd ${DESTDIR}
        export DESTDIR
        find ./ -name '*.ko' -print0 | \
                xargs -0r -n1 -P ${XBPS_MAKEJOBS} ${FILESDIR}/mv-debug
        )
        # ... and run depmod again.
        depmod -b ${DESTDIR}/usr -F System.map ${_kernver}

echo "
                                                            /(#%%%%%%#*..,*(
                         .     ..,*****/////,.   .  ,/((((((####%%&#,.,,,,,/
        . .        ..  ,/((#################((##%&%/,./(((((####%/,##,,,,,*(
,  .*(%&&&&&%%###(((/,*(((%%#################(((((((#%&(*(((###*,#@@&%#(**/(
&%%%%%&&&&%%%%%%###(((((%%%%%#################((((((#####%###/,#@@@@@@@@@%// 
%%%%%%%&&%%%%%%%###((((#%%%%%%%%###############(((############%%%%%%%%%#**(   
%%%%%%%%%%%%%%#####(((#%%%%%%%%######%%%%%%%%%%%%#((##########%#/(#####%#*, 
..*/##############(((#%%%%%%%%#(###%%%%%%%%%%%%%%%#%#(#%%%%#####%%**#####&/,    
,,,.,*,..*/#####(((##%%%%%%%%##(###%%%%%%%%%%%%%%%%##%((#%&&%###%&&#.*###%@(
,,,,/#@@@@%(*,,/((#%%%%%%%%%#######%%%%%%%%%%%%%#%#(#%&#(//#%#((##((%(.*&&#.
,/&@@@@@@%##/,/(#######%%%#####(###(#%%%&%%%%##(/%&%(&&%///////(((((((&/ 
/#########/*#########((######(/*/#///#%(#&%///////////(&/*/////**((((((&( 
/****/##(*((########((%%(%%(///*./(////#(//////////////(//**/////,*(((/(&(
,/***(#**(((########//////////*..,((((((//////////////*%%#/.*((((/,,/((/(&*   
.******/(((########(/////////*,##*****/(((((((((////(,.((.,#/,((((/,****/##   
(,,***///*(###%%###(*//////**(#*,(####*.(((((((((((((((#*#%&%#//(((/,,*//(#   
%/,***#@@&/(#%%%%#%//////,*#%%&&&%(*..*(((/(#((((((((((/(%#(*,.      .,*///   
(,#@&&@@&(*(%%%%%##*///*/%%%%&&@@@@&%(//(///(#((((((((,  .(/*/(#%#/*, .*//*  
/,(((###%(/(%%%%%##,,,(%%%%%%#(/*,,.      .//##((((((,... ,#/*%&%%##* .,*/* 
*#/,#/(%#/(((#%%%&%,(#*       .**/#%%%%(**...,(#(((*...... .*#/*((((. ,,,/. 
#/ ,%#,*/((((/(##&&/,.  ........*(*(%&%%##,.../##(. ..........*((**. ...., 
   /@@/,((((((((/(&(.   ........ ./(**(##(..**((*/(..,,,,,,,,,,,**. ,&&&(.*.
   %@@(.*/(((//(((#%**. .......... .*(*,*,./#*/#&&%(* .,*******.   (@&&%..
        **/((((((((#%**  ,,,,,,,......,*,.#@@@@@@@@@&%#(/**/(#%#..%@@@%,,*&,.*..
            ((#(((####*((. .,,,,,,,,,,. *&@@@@@@@@@@@@@@@&&&&&%**&@@@%,.*./@&&&/
           ../#######%/*###/*.    .,/#@@@@@@@@@@@@&**&@@@&&&%,/@@@@%.  /@@@@&*.
               .,(####(*,...,,*/,/%&&&@@@(*&%/,//,,,(&@@&&&&%,,%####. /@@@@%,.
                    ,/(##/,,,****,(&&&&@@@@&&&&&@@@@@&&%%###,,###%%*#&##@#.,(
            ,  ./####%%%%%(,,,,,,,,#%&&&&&&&&&&&&&&&&%#,.#&%#/*,*/#%#(*, #
           .(%####%%%%%%%&&#,,,..,. *#%&&&&&&&&%#(*,.  .*#%&@@@@&, ./%&&(..
             *&&&&&@@@&&&&&&%**/***..,,..,*//.     .... .(/..  ./%@@@@&&&/ ,
                %@@@@@@@@@@@@@(*/****.  .,///*,. ,,...  /@@%(*,*#%%(*#@@&&&,.
"
}

linux-tkg-dbg_package() {
   	preserve=yes
        nostrip=yes
        noverifyrdeps=yes
        noshlibprovides=yes
        repository=debug
        short_desc+=" - debugging symbols"
        pkg_install() {
                vmove usr/lib/debug
        }
}

# because xbps-src doesn't allow variables in subpkg functions
case $_basever-$_cpusched$_compiler_name in
	510-pds)
	linux510-tkg-pds_package() {
		short_desc+=" - PDS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux510-tkg-headers-pds_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	510-bmq)
	linux510-tkg-bmq_package() {
		short_desc+=" - BMQ CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux510-tkg-headers-bmq_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	510-cfs)
	linux510-tkg-cfs_package() {
		short_desc+=" - CFS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux510-tkg-headers-cfs_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	510-MuQSS)
	linux510-tkg-MuQSS_package() {
		short_desc+=" - MuQSS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux510-tkg-headers-MuQSS_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	510-pds-llvm)
	linux510-tkg-pds-llvm_package() {
		short_desc+=" - PDS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux510-tkg-headers-pds-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	510-bmq-llvm)
	linux510-tkg-bmq-llvm_package() {
		short_desc+=" - BMQ CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux510-tkg-headers-bmq-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	510-cfs-llvm)
	linux510-tkg-cfs-llvm_package() {
		short_desc+=" - CFS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux510-tkg-headers-cfs-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	510-MuQSS-llvm)
	linux510-tkg-MuQSS-llvm_package() {
		short_desc+=" - MuQSS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux510-tkg-headers-MuQSS-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	59-pds)
	linux59-tkg-pds_package() {
		short_desc+=" - PDS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux59-tkg-headers-pds_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	59-bmq)
	linux59-tkg-bmq_package() {
		short_desc+=" - BMQ CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux59-tkg-headers-bmq_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	59-cfs)
	linux59-tkg-cfs_package() {
		short_desc+=" - CFS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux59-tkg-headers-cfs_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	59-MuQSS)
	linux59-tkg-MuQSS_package() {
		short_desc+=" - MuQSS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux59-tkg-headers-MuQSS_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	59-pds-llvm)
	linux59-tkg-pds-llvm_package() {
		short_desc+=" - PDS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux59-tkg-headers-pds-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	59-bmq-llvm)
	linux59-tkg-bmq-llvm_package() {
		short_desc+=" - BMQ CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux59-tkg-headers-bmq-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	59-cfs-llvm)
	linux59-tkg-cfs-llvm_package() {
		short_desc+=" - CFS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux59-tkg-headers-cfs-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	59-MuQSS-llvm)
	linux59-tkg-MuQSS-llvm_package() {
		short_desc+=" - MuQSS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver_dir}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux59-tkg-headers-MuQSS-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-upds)
	linux58-tkg-upds_package() {
		short_desc+=" - undead (TkG) PDS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-upds_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-pds)
	linux58-tkg-pds_package() {
		short_desc+=" - PDS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-pds_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-bmq)
	linux58-tkg-bmq_package() {
		short_desc+=" - BMQ CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-bmq_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-cfs)
	linux58-tkg-cfs_package() {
		short_desc+=" - CFS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-cfs_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-MuQSS)
	linux58-tkg-MuQSS_package() {
		short_desc+=" - MuQSS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-MuQSS_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-upds-llvm)
	linux58-tkg-upds-llvm_package() {
		short_desc+=" - undead (TkG) PDS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-upds-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-pds-llvm)
	linux58-tkg-pds-llvm_package() {
		short_desc+=" - PDS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-pds-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-bmq-llvm)
	linux58-tkg-bmq-llvm_package() {
		short_desc+=" - BMQ CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-bmq-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-cfs-llvm)
	linux58-tkg-cfs-llvm_package() {
		short_desc+=" - CFS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-cfs-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-MuQSS-llvm)
	linux58-tkg-MuQSS-llvm_package() {
		short_desc+=" - MuQSS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-MuQSS-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	57-pds)
	linux57-tkg-pds_package() {
		short_desc+=" - PDS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux57-tkg-headers-pds_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	57-bmq)
	linux57-tkg-bmq_package() {
		short_desc+=" - BMQ CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux57-tkg-headers-bmq_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	57-cfs)
	linux57-tkg-cfs_package() {
		short_desc+=" - CFS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux57-tkg-headers-cfs_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	57-MuQSS)
	linux57-tkg-MuQSS_package() {
		short_desc+=" - MuQSS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux57-tkg-headers-MuQSS_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	57-pds-llvm)
	linux57-tkg-pds-llvm_package() {
		short_desc+=" - PDS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux57-tkg-headers-pds-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	57-bmq-llvm)
	linux57-tkg-bmq-llvm_package() {
		short_desc+=" - BMQ CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux57-tkg-headers-bmq-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	57-cfs-llvm)
	linux57-tkg-cfs-llvm_package() {
		short_desc+=" - CFS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux57-tkg-headers-cfs-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	57-MuQSS-llvm)
	linux57-tkg-MuQSS-llvm_package() {
		short_desc+=" - MuQSS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux57-tkg-headers-MuQSS-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	54-pds)
	linux54-tkg-pds_package() {
		short_desc+=" - PDS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux54-tkg-headers-pds_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	54-bmq)
	linux54-tkg-bmq_package() {
		short_desc+=" - BMQ CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux54-tkg-headers-bmq_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	54-cfs)
	linux54-tkg-cfs_package() {
		short_desc+=" - CFS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux54-tkg-headers-cfs_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	54-MuQSS)
	linux54-tkg-MuQSS_package() {
		short_desc+=" - MuQSS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux54-tkg-headers-MuQSS_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	54-pds-llvm)
	linux54-tkg-pds-llvm_package() {
		short_desc+=" - PDS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux54-tkg-headers-pds-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	54-bmq-llvm)
	linux54-tkg-bmq-llvm_package() {
		short_desc+=" - BMQ CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux54-tkg-headers-bmq-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	54-cfs-llvm)
	linux54-tkg-cfs-llvm_package() {
		short_desc+=" - CFS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux54-tkg-headers-cfs-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	54-MuQSS-llvm)
	linux54-tkg-MuQSS-llvm_package() {
		short_desc+=" - MuQSS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}${_compiler_name}_${revision}"
	}
	linux54-tkg-headers-MuQSS-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
esac

