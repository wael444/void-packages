# based on PKGBUILD from Tk-Glitch <ti3nou@gmail.com>
msg2() {
 echo -e " \033[1;34m->\033[1;0m \033[1;1m$1\033[1;0m" >&2
}

error() {
 echo -e " \033[1;31m==> ERROR: $1\033[1;0m" >&2
}

warning() {
 echo -e " \033[1;33m==> WARNING: $1\033[1;0m" >&2
}

plain() {
 echo "$1" >&2
}
create_wrksrc=yes
wrksrc=linux-tkg
_distro="Void"
_where="${XBPS_SRCPKGDIR}/linux-tkg/files"
srcdir="${XBPS_BUILDDIR}/${wrksrc}"
source ${_where}/customization.cfg
source ${_where}/linux-tkg-config/prepare
_tkg_initscript
# Template file for 'linux${_basever}-tkg-${_cpusched}-${_compiler_name}'
pkgname=linux${_basever}-tkg-${_cpusched}-${_compiler_name}
revision=4
archs="x86_64" # PKGBUILD declares x86_64 only
python_version=3
patch_args="-Np1"
hostmakedepends="schedtool xmlto libressl-devel docbook-xsl kmod inetutils bc libelf patchutils flex python3-Sphinx python3-sphinx_rtd_theme graphviz perl uboot-mkimage cpio gmp-devel libmpc-devel elfutils-devel pahole"
makedepends="xz"
triggers="kernel-hooks"

if [[ "$_sub" = rc* ]]; then
  version=${_basekernel}-${_sub}
  _rc_kern_ver=${_basekernel}-${_sub}
  _kern_ver_dir=${_basekernel}-${_sub}
  _kern_ver=${version}-${_sub}
  kernel_site="https://git.kernel.org/torvalds/t/linux-${_rc_kern_ver}.tar.gz"
  _kern_ver=${version}-${_sub}
else
  version=${_basekernel}.${_sub}
  _kern_ver=${_basekernel}.${_sub}
  _kern_ver_dir=${_basekernel}.${_sub}
  kernel_site="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-${_kern_ver}.tar.xz"
fi


_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
_make_kernver="-tkg-${_cpusched}-${_compiler_name}_${revision}"
short_desc="Linux-tkg BMQ/PrjC CPU Scheduler"
maintainer="Hyper-KVM <hyperkvmx86@gmail.com>"
license="GPL-2.0-only"
homepage="http://www.kernel.org"

case "$_basever" in
	"54")
	opt_ver="4.19-v5.4"
	cpu_opt_sum='27b7fc535ade94b636c3ec4e809e141831e9465a0ef55215a9852b87048629e2'
	kernel_sum='b9d3c2938466f388a70fd190fd6691baa8b757393b267e9f7b06c4730d85d5ef'
	;;
	"57")
	opt_ver="5.7+"
	cpu_opt_sum='1f56a2466bd9b4477925682d8f944fabb38727140e246733214fe50aa326fc47'
	kernel_sum='419c6248b9ae4dfead4599787aecbfd202e88bc4124523adfa6dd2d642b99fe7'
	;;
	"58")
	opt_ver="5.8+"
	cpu_opt_sum='5ab29eb64e57df83b395a29a6a4f89030d142feffbfbf73b3afc6d97a2a7fd12'
	kernel_sum='33f61bb3e99a4b8bcc0fdfc7e7d72071795bccba465184665a9ae7bd7f00a976'
	;;
	"59")
	opt_ver="5.8+"
	cpu_opt_sum='5ab29eb64e57df83b395a29a6a4f89030d142feffbfbf73b3afc6d97a2a7fd12'
	kernel_sum='13f9de1afcd547a537c92280a18899f3f1148eb35b98ceeeac1fe85e1b681820'
	;;
esac

distfiles="${kernel_site}
https://raw.githubusercontent.com/graysky2/kernel_gcc_patch/master/enable_additional_cpu_optimizations_for_gcc_v10.1+_kernel_v${opt_ver}.patch"
checksum="${kernel_sum}
${cpu_opt_sum}"
nostrip=yes
noshlibprovides=yes
preserve=yes
nodebug=yes
if [ "$_compiler_name" = "llvm" ]; then
  hostmakedepends+=" llvm clang lld"
fi

# These files could be modified when an external module is built.
mutable_files="
 /usr/lib/modules/${_kernver}/modules.builtin.bin
 /usr/lib/modules/${_kernver}/modules.builtin.alias.bin
 /usr/lib/modules/${_kernver}/modules.softdep
 /usr/lib/modules/${_kernver}/modules.dep
 /usr/lib/modules/${_kernver}/modules.dep.bin
 /usr/lib/modules/${_kernver}/modules.symbols
 /usr/lib/modules/${_kernver}/modules.symbols.bin
 /usr/lib/modules/${_kernver}/modules.alias
 /usr/lib/modules/${_kernver}/modules.alias.bin
 /usr/lib/modules/${_kernver}/modules.devname"

do_configure() {

echo '       .---.`               `.---.'
echo '    `/syhhhyso-           -osyhhhys/`'
echo '   .syNMdhNNhss/``.---.``/sshNNhdMNys.'
echo '   +sdMh.`+MNsssssssssssssssNM+`.hMds+'
echo '   :syNNdhNNhssssssssssssssshNNhdNNys:'
echo '    /ssyhhhysssssssssssssssssyhhhyss/'
echo '    .ossssssssssssssssssssssssssssso.'
echo '   :sssssssssssssssssssssssssssssssss:'
echo '  /sssssssssssssssssssssssssssssssssss/'
echo ' :sssssssssssssoosssssssoosssssssssssss:'
echo ' osssssssssssssoosssssssoossssssssssssso'
echo ' osssssssssssyyyyhhhhhhhyyyyssssssssssso'
echo ' /yyyyyyhhdmmmmNNNNNNNNNNNmmmmdhhyyyyyy/'
echo '  smmmNNNNNNNNNNNNNNNNNNNNNNNNNNNNNmmms'
echo '   /dNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNd/'
echo '    `:sdNNNNNNNNNNNNNNNNNNNNNNNNNds:`'
echo '       `-+shdNNNNNNNNNNNNNNNdhs+-`'
echo '             `.-:///////:-.`'

if [ -n "$_custom_pkgbase" ]; then
  pkgbase="${_custom_pkgbase}"
else
  pkgbase=linux"${_basever}"-tkg-"${_cpusched}"
fi

export KBUILD_BUILD_HOST=voidlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

_tkg_srcprep
}

do_build() {

  cd ${wrksrc}/linux-${_kern_ver_dir}

  # Use custom compiler paths if defined
  if [ -n "${CUSTOM_GCC_PATH}" ]; then
    PATH=${CUSTOM_GCC_PATH}/bin:${CUSTOM_GCC_PATH}/lib:${CUSTOM_GCC_PATH}/include:${PATH}
  fi

  if [ "$_force_all_threads" == "true" ]; then
    _force_all_threads="-j$((`nproc`*2))"
  else
    _force_all_threads="${makejobs}"
  fi

  # ccache
  if [ "$_noccache" != "true" ] && xbps-query -s ccache &> /dev/null; then
    export PATH="/usr/lib/ccache/bin/:$PATH"
    export CCACHE_SLOPPINESS="file_macro,locale,time_macros"
    export CCACHE_NOHASHDIR="true"
    echo 'ccache was found and will be used'
  fi

  # build!
  _runtime=$( time ( schedtool -B -n 1 -e ionice -n 1 make ${_force_all_threads} ${_compiler_opt} LOCALVERSION=${_make_kernver} bzImage modules 2>&1 ) 3>&1 1>&2 2>&3 ) || _runtime=$( time ( make ${_force_all_threads} ${_compiler_opt} LOCALVERSION=${_make_kernver} bzImage modules 2>&1 ) 3>&1 1>&2 2>&3 )

  if [ -n "$_runtime" ]; then
    printf "compilation time : \n$_runtime"
  fi
}

do_install() {
	
	cd ${wrksrc}/linux-${_kern_ver_dir}

	local arch subarch _args hdrdest

  	echo "Installing modules..."
  	make INSTALL_MOD_PATH="$DESTDIR" modules_install

  	hdrdest=${DESTDIR}/usr/src/kernel-headers-${_kernver}

  	vinstall .config 644 boot config-${_kernver}
  	vinstall System.map 644 boot System.map-${_kernver}
  	vinstall arch/x86/boot/bzImage 644 boot vmlinuz-${_kernver}

	# Switch to /usr.
        vmkdir usr
        mv ${DESTDIR}/lib ${DESTDIR}/usr

	
        cd ${DESTDIR}/usr/lib/modules/${_kernver}
        rm -f source build
        ln -sf ../../../src/kernel-headers-${_kernver} build

        cd ${wrksrc}/linux-${_kern_ver_dir}
        # Install required headers to build external modules
        install -Dm644 Makefile ${hdrdest}/Makefile
        install -Dm644 kernel/Makefile ${hdrdest}/kernel/Makefile
        install -Dm644 .config ${hdrdest}/.config
        for file in $(find . -name Kconfig\*); do
                mkdir -p ${hdrdest}/$(dirname $file)
                install -Dm644 $file ${hdrdest}/${file}
        done
        for file in $(find arch/${subarch:-$arch} -name module.lds -o -name Kbuild.platforms -o -name Platform); do
                mkdir -p ${hdrdest}/$(dirname $file)
                install -Dm644 $file ${hdrdest}/${file}
        done
        mkdir -p ${hdrdest}/include
        # Remove firmware stuff provided by the "linux-firmware" pkg.
        rm -rf ${DESTDIR}/usr/lib/firmware

        for i in acpi asm-generic clocksource config crypto drm generated linux \
                math-emu media net pcmcia scsi sound trace uapi vdso video xen dt-bindings; do
                if [ -d include/$i ]; then
                        cp -a include/$i ${hdrdest}/include
                fi
        done

	cd ${wrksrc}/linux-${_kern_ver_dir}
        mkdir -p ${hdrdest}/arch/x86
        cp -a arch/x86/include ${hdrdest}/arch/x86

	# Copy files necessary for later builds, like nvidia and vmware

	 cp Module.symvers ${hdrdest}
        cp -a scripts ${hdrdest}
        mkdir -p ${hdrdest}/security/selinux
        cp -a security/selinux/include ${hdrdest}/security/selinux
        mkdir -p ${hdrdest}/tools/include
        cp -a tools/include/tools ${hdrdest}/tools/include

        mkdir -p ${hdrdest}/arch/x86/kernel
        cp arch/x86/Makefile ${hdrdest}/arch/x86
        mkdir -p ${hdrdest}/arch/x86/kernel
        cp arch/x86/kernel/asm-offsets.s ${hdrdest}/arch/x86/kernel

	 # add headers for lirc package
        # pci
        for i in bt8xx cx88 saa7134; do
                mkdir -p ${hdrdest}/drivers/media/pci/${i}
                cp -a drivers/media/pci/${i}/*.h ${hdrdest}/drivers/media/pci/${i}
        done
        # usb
        for i in cpia2 em28xx pwc; do
                mkdir -p ${hdrdest}/drivers/media/usb/${i}
                cp -a drivers/media/usb/${i}/*.h ${hdrdest}/drivers/media/usb/${i}
        done
        # i2c
        mkdir -p ${hdrdest}/drivers/media/i2c
        cp drivers/media/i2c/*.h ${hdrdest}/drivers/media/i2c
        for i in cx25840; do
                mkdir -p ${hdrdest}/drivers/media/i2c/${i}
                cp -a drivers/media/i2c/${i}/*.h ${hdrdest}/drivers/media/i2c/${i}
        done

        # Add md headers
        mkdir -p ${hdrdest}/drivers/md
        cp drivers/md/*.h ${hdrdest}/drivers/md

        # Add inotify.h
        mkdir -p ${hdrdest}/include/linux
        cp include/linux/inotify.h ${hdrdest}/include/linux

        # Add wireless headers
	mkdir -p ${hdrdest}/net/mac80211/
        cp net/mac80211/*.h ${hdrdest}/net/mac80211

        # add dvb headers for external modules
        mkdir -p ${hdrdest}/include/config/dvb/
        cp include/config/dvb/*.h ${hdrdest}/include/config/dvb/

        # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
        mkdir -p ${hdrdest}/drivers/media/dvb-frontends
        cp drivers/media/dvb-frontends/lgdt330x.h \
                ${hdrdest}/drivers/media/dvb-frontends/
        cp drivers/media/i2c/msp3400-driver.h ${hdrdest}/drivers/media/i2c/

        # add dvb headers
        mkdir -p ${hdrdest}/drivers/media/usb/dvb-usb
        cp drivers/media/usb/dvb-usb/*.h ${hdrdest}/drivers/media/usb/dvb-usb/
        mkdir -p ${hdrdest}/drivers/media/dvb-frontends
        cp drivers/media/dvb-frontends/*.h ${hdrdest}/drivers/media/dvb-frontends/
        mkdir -p ${hdrdest}/drivers/media/tuners
        cp drivers/media/tuners/*.h ${hdrdest}/drivers/media/tuners/

        # Add xfs and shmem for aufs building
        mkdir -p ${hdrdest}/fs/xfs/libxfs
        mkdir -p ${hdrdest}/mm
        cp fs/xfs/libxfs/xfs_sb.h ${hdrdest}/fs/xfs/libxfs/xfs_sb.h

	 # Add objtool binary, needed to build external modules with dkms
        mkdir -p ${hdrdest}/tools/objtool
        cp tools/objtool/objtool ${hdrdest}/tools/objtool

	# Remove unneeded architectures
        for arch in alpha avr32 blackfin cris frv h8300 \
                ia64 m* s* um v850 xtensa "arm* p*"; do
                rm -rf ${hdrdest}/arch/${arch}
        done

	# Keep arch/x86/ras/Kconfig as it is needed by drivers/ras/Kconfig
        mkdir -p ${hdrdest}/arch/x86/ras
        cp -a arch/x86/ras/Kconfig ${hdrdest}/arch/x86/ras/Kconfig

	 # Extract debugging symbols and compress modules
        msg_normal "$pkgver: extracting debug info and compressing modules, please wait...\n"
        install -Dm644 vmlinux ${DESTDIR}/usr/lib/debug/boot/vmlinux-${_kernver}
        (
        cd ${DESTDIR}
        export DESTDIR
        find ./ -name '*.ko' -print0 | \
                xargs -0r -n1 -P ${XBPS_MAKEJOBS} ${FILESDIR}/mv-debug
        )
        # ... and run depmod again.
        depmod -b ${DESTDIR}/usr -F System.map ${_kernver}
}

linux-tkg-dbg_package() {
   	preserve=yes
        nostrip=yes
        noverifyrdeps=yes
        noshlibprovides=yes
        repository=debug
        short_desc+=" - debugging symbols"
        pkg_install() {
                vmove usr/lib/debug
        }
}

# because xbps-src doesn't allow variables in subpkg functions
case $_basever-$_cpusched-$_compiler_name in
	59-pds-gcc)
	linux59-tkg-pds-gcc_package() {
		short_desc+=" - PDS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_rc_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_rc_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux59-tkg-headers-pds-gcc_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	59-bmq-gcc)
	linux59-tkg-bmq-gcc_package() {
		short_desc+=" - BMQ CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_rc_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_rc_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux59-tkg-headers-bmq-gcc_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	59-cfs-gcc)
	linux59-tkg-cfs-gcc_package() {
		short_desc+=" - CFS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_rc_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_rc_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux59-tkg-headers-cfs-gcc_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	59-MuQSS-gcc)
	linux59-tkg-MuQSS-gcc_package() {
		short_desc+=" - MuQSS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_rc_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_rc_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux59-tkg-headers-MuQSS-gcc_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	59-pds-llvm)
	linux59-tkg-pds-llvm_package() {
		short_desc+=" - PDS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_rc_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_rc_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux59-tkg-headers-pds-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	59-bmq-llvm)
	linux59-tkg-bmq-llvm_package() {
		short_desc+=" - BMQ CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_rc_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_rc_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux59-tkg-headers-bmq-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	59-cfs-llvm)
	linux59-tkg-cfs-llvm_package() {
		short_desc+=" - CFS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_rc_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_rc_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux59-tkg-headers-cfs-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	59-MuQSS-llvm)
	linux59-tkg-MuQSS-llvm_package() {
		short_desc+=" - MuQSS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_rc_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_rc_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux59-tkg-headers-MuQSS-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-upds-gcc)
	linux58-tkg-upds-gcc_package() {
		short_desc+=" - undead (TkG) PDS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-upds-gcc_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-pds-gcc)
	linux58-tkg-pds-gcc_package() {
		short_desc+=" - PDS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-pds-gcc_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-bmq-gcc)
	linux58-tkg-bmq-gcc_package() {
		short_desc+=" - BMQ CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-bmq-gcc_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-cfs-gcc)
	linux58-tkg-cfs-gcc_package() {
		short_desc+=" - CFS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-cfs-gcc_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-MuQSS-gcc)
	linux58-tkg-MuQSS-gcc_package() {
		short_desc+=" - MuQSS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-MuQSS-gcc_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-upds-llvm)
	linux58-tkg-upds-llvm_package() {
		short_desc+=" - undead (TkG) PDS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-upds-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-pds-llvm)
	linux58-tkg-pds-llvm_package() {
		short_desc+=" - PDS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-pds-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-bmq-llvm)
	linux58-tkg-bmq-llvm_package() {
		short_desc+=" - BMQ CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-bmq-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-cfs-llvm)
	linux58-tkg-cfs-llvm_package() {
		short_desc+=" - CFS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-cfs-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	58-MuQSS-llvm)
	linux58-tkg-MuQSS-llvm_package() {
		short_desc+=" - MuQSS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux58-tkg-headers-MuQSS-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	57-pds-gcc)
	linux57-tkg-pds-gcc_package() {
		short_desc+=" - PDS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux57-tkg-headers-pds-gcc_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	57-bmq-gcc)
	linux57-tkg-bmq-gcc_package() {
		short_desc+=" - BMQ CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux57-tkg-headers-bmq-gcc_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	57-cfs-gcc)
	linux57-tkg-cfs-gcc_package() {
		short_desc+=" - CFS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux57-tkg-headers-cfs-gcc_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	57-MuQSS-gcc)
	linux57-tkg-MuQSS-gcc_package() {
		short_desc+=" - MuQSS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux57-tkg-headers-MuQSS-gcc_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	57-pds-llvm)
	linux57-tkg-pds-llvm_package() {
		short_desc+=" - PDS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux57-tkg-headers-pds-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	57-bmq-llvm)
	linux57-tkg-bmq-llvm_package() {
		short_desc+=" - BMQ CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux57-tkg-headers-bmq-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	57-cfs-llvm)
	linux57-tkg-cfs-llvm_package() {
		short_desc+=" - CFS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux57-tkg-headers-cfs-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	57-MuQSS-llvm)
	linux57-tkg-MuQSS-llvm_package() {
		short_desc+=" - MuQSS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux57-tkg-headers-MuQSS-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	54-pds-gcc)
	linux54-tkg-pds-gcc_package() {
		short_desc+=" - PDS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux54-tkg-headers-pds-gcc_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	54-bmq-gcc)
	linux54-tkg-bmq-gcc_package() {
		short_desc+=" - BMQ CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux54-tkg-headers-bmq-gcc_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	54-cfs-gcc)
	linux54-tkg-cfs-gcc_package() {
		short_desc+=" - CFS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux54-tkg-headers-cfs-gcc_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	54-MuQSS-gcc)
	linux54-tkg-MuQSS-gcc_package() {
		short_desc+=" - MuQSS CPU Scheduler compiled w/GCC"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux54-tkg-headers-MuQSS-gcc_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	54-pds-llvm)
	linux54-tkg-pds-llvm_package() {
		short_desc+=" - PDS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux54-tkg-headers-pds-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	54-bmq-llvm)
	linux54-tkg-bmq-llvm_package() {
		short_desc+=" - BMQ CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux54-tkg-headers-bmq-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	54-cfs-llvm)
	linux54-tkg-cfs-llvm_package() {
		short_desc+=" - CFS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux54-tkg-headers-cfs-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
	;;
	54-MuQSS-llvm)
	linux54-tkg-MuQSS-llvm_package() {
		short_desc+=" - MuQSS CPU Scheduler compiled w/LLVM"
		nostrip=yes
		noshlibprovides=yes
		preserve=yes
		triggers="kernel-hooks"
		_kernver="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
		kernel_hooks_version="${_kern_ver}-tkg-${_cpusched}-${_compiler_name}_${revision}"
	}
	linux54-tkg-headers-MuQSS-llvm_package() {
  		short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  		nostrip=yes
  		preserve=yes
  		noshlibprovides=yes
  		pkg_install() {
        		vmove /usr/src
        		vmove /usr/lib/modules/${_kernver}/build
  		}
	}
esac

