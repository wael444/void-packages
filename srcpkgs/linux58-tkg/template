# Template file for 'linux58-tkg'
# based on PKGBUILD from Tk-Glitch <ti3nou@gmail.com>
pkgname=linux58-tkg
_sub=1
version=5.8.1 # forced version number
_version=5.8
_basever=5.8
revision=5
archs="x86_64" # PKGBUILD declares x86_64 only
create_wrksrc=yes
wrksrc=linux-${version}
python_version=3
patch_args="-Np1"
hostmakedepends="schedtool xmlto libressl-devel docbook-xsl kmod inetutils bc libelf patchutils flex python3-Sphinx python3-sphinx_rtd_theme graphviz ImageMagick perl uboot-mkimage cpio gmp-devel libmpc-devel elfutils-devel pahole"
makedepends="xz"
triggers="kernel-hooks"
_kernver="${_basever}.${_sub}-tkg-bmq"
kernel_hooks_version="${_basever}.${_sub}-tkg-bmq"
short_desc="Linux-tkg BMQ/PrjC CPU Scheduler"
maintainer="Hyper-KVM <hyperkvmx86@gmail.com>"
license="GPL-2.0-only"
homepage="http://www.kernel.org"
distfiles="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-${version}.tar.xz
https://raw.githubusercontent.com/graysky2/kernel_gcc_patch/master/enable_additional_cpu_optimizations_for_gcc_v10.1+_kernel_v5.8+.patch"
#https://www.kernel.org/pub/linux/kernel/v5.x/patch-${_version}.xz"
checksum="f8d2a4fe938ff7faa565765a52e347e518a0712ca6ddd41b198bd9cc1626a724
5ab29eb64e57df83b395a29a6a4f89030d142feffbfbf73b3afc6d97a2a7fd12"
#febbb12fde35d754628930805f696d692d5e17fcea34469b96a81072b9dd7179"
nostrip=yes
noshlibprovides=yes
preserve=yes
nodebug=yes

# These files could be modified when an external module is built.
mutable_files="
 /usr/lib/modules/${_kernver}/modules.builtin.bin
 /usr/lib/modules/${_kernver}/modules.builtin.alias.bin
 /usr/lib/modules/${_kernver}/modules.softdep
 /usr/lib/modules/${_kernver}/modules.dep
 /usr/lib/modules/${_kernver}/modules.dep.bin
 /usr/lib/modules/${_kernver}/modules.symbols
 /usr/lib/modules/${_kernver}/modules.symbols.bin
 /usr/lib/modules/${_kernver}/modules.alias
 /usr/lib/modules/${_kernver}/modules.alias.bin
 /usr/lib/modules/${_kernver}/modules.devname"


do_configure() {

echo '       .---.`               `.---.'
echo '    `/syhhhyso-           -osyhhhys/`'
echo '   .syNMdhNNhss/``.---.``/sshNNhdMNys.'
echo '   +sdMh.`+MNsssssssssssssssNM+`.hMds+'
echo '   :syNNdhNNhssssssssssssssshNNhdNNys:'
echo '    /ssyhhhysssssssssssssssssyhhhyss/'
echo '    .ossssssssssssssssssssssssssssso.'
echo '   :sssssssssssssssssssssssssssssssss:'
echo '  /sssssssssssssssssssssssssssssssssss/'
echo ' :sssssssssssssoosssssssoosssssssssssss:'
echo ' osssssssssssssoosssssssoossssssssssssso'
echo ' osssssssssssyyyyhhhhhhhyyyyssssssssssso'
echo ' /yyyyyyhhdmmmmNNNNNNNNNNNmmmmdhhyyyyyy/'
echo '  smmmNNNNNNNNNNNNNNNNNNNNNNNNNNNNNmmms'
echo '   /dNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNd/'
echo '    `:sdNNNNNNNNNNNNNNNNNNNNNNNNNds:`'
echo '       `-+shdNNNNNNNNNNNNNNNdhs+-`'
echo '             `.-:///////:-.`'

if [ -e ${FILESDIR}/cpuschedset ]; then
  rm ${FILESDIR}/cpuschedset
fi

source "${FILESDIR}"/customization.cfg # load default configuration from file

# Load external configuration file if present. Available variable values will overwrite customization.cfg ones.
if [ -e "$_EXT_CONFIG_PATH" ]; then
	source "$_EXT_CONFIG_PATH" && echo "External configuration file $_EXT_CONFIG_PATH will be used to override customization.cfg values." && echo ""
fi

if [ -z "$_OPTIPROFILE" ] && [ ! -e "$FILESDIR"/cpuschedset ]; then
	# Prompt about optimized configurations. Available variable values will overwrite customization.cfg/external config ones.
  	echo "Do you want to use a predefined optimized profile?"
  	read -rp "`echo $'  > 1.Custom\n    2.Ryzen Desktop (Performance)\n    3.Other Desktop (Performance)\nchoice[1-3?]: '`" _OPTIPROFILE;
fi
if [ "$_OPTIPROFILE" == "2" ]; then
  source "$FILESDIR"/linux58-tkg-config/ryzen-desktop-profile.cfg && echo "Ryzen Desktop (Performance) profile will be used." && echo ""
elif [ "$_OPTIPROFILE" == "3" ]; then
  source "$FILESDIR"/linux58-tkg-config/generic-desktop-profile.cfg && echo "Generic Desktop (Performance) profile will be used." && echo ""
fi

# CPU SCHED selector
if [ -z "$_cpusched" ] && [ ! -e "$FILESDIR"/cpuschedset ]; then
  echo "What CPU sched variant do you want to build/install?"
  read -rp "`echo $'  > 1.PDS\n    2.MuQSS\n    3.PrjC / BMQ\n    4.CFS\nchoice[1-4?]: '`" CONDITION;
  if [ "$CONDITION" == "2" ]; then
    echo "_cpusched=\"MuQSS\"" > "$FILESDIR"/cpuschedset
  elif [ "$CONDITION" == "3" ]; then
    echo "_cpusched=\"bmq\"" > "$FILESDIR"/cpuschedset
  elif [ "$CONDITION" == "4" ]; then
    echo "_cpusched=\"cfs\"" > "$FILESDIR"/cpuschedset
  else
    echo "_cpusched=\"pds\"" > "$FILESDIR"/cpuschedset
  fi
  if [ -n "$_custom_pkgbase" ]; then
    echo "_custom_pkgbase=\"${_custom_pkgbase}\"" >> "$FILESDIR"/cpuschedset
  fi
elif [ "$_cpusched" == "muqss" ] || [ "$_cpusched" == "MuQSS" ]; then
  echo "_cpusched=\"MuQSS\"" > "$FILESDIR"/cpuschedset
elif [ "$_cpusched" == "pds" ]; then
  echo "_cpusched=\"pds\"" > "$FILESDIR"/cpuschedset
elif [ "$_cpusched" == "bmq" ]; then
  echo "_cpusched=\"bmq\"" > "$FILESDIR"/cpuschedset
else
  echo "_cpusched=\"cfs\"" > "$FILESDIR"/cpuschedset
fi

source "$FILESDIR"/cpuschedset

if [ -n "$_custom_pkgbase" ]; then
  pkgbase="${_custom_pkgbase}"
else
  pkgbase=linux"${_basever}"-tkg-"${_cpusched}"
fi


export KBUILD_BUILD_HOST=voidlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

  ln -sf "${FILESDIR}/customization.cfg" "${wrksrc}" # workaround

  source "${FILESDIR}/linux58-tkg-config/prepare"
  _tkg_srcprep

}

do_build() {

  source "${FILESDIR}/linux58-tkg-config/prepare"
  cd ${wrksrc}/linux-${version}

  # Use custom compiler paths if defined
  if [ -n "${CUSTOM_GCC_PATH}" ]; then
    PATH=${CUSTOM_GCC_PATH}/bin:${CUSTOM_GCC_PATH}/lib:${CUSTOM_GCC_PATH}/include:${PATH}
  fi

  if [ "$_force_all_threads" == "true" ]; then
    _force_all_threads="-j$((`nproc`*2))"
  else
    _force_all_threads="${makejobs}"
  fi

  # ccache
  if [ "$_noccache" != "true" ] && xbps-query -s ccache &> /dev/null; then
    export PATH="/usr/lib/ccache/bin/:$PATH"
    export CCACHE_SLOPPINESS="file_macro,locale,time_macros"
    export CCACHE_NOHASHDIR="true"
    echo 'ccache was found and will be used'
  fi

  # build!
  _runtime=$( time ( schedtool -B -n 1 -e ionice -n 1 make ${_force_all_threads} LOCALVERSION=-tkg-${_cpusched} bzImage modules 2>&1 ) 3>&1 1>&2 2>&3 ) || _runtime=$( time ( make ${_force_all_threads} LOCALVERSION=-tkg-${_cpusched} bzImage modules 2>&1 ) 3>&1 1>&2 2>&3 )

  if [ -n "$_runtime" ]; then
    printf "compilation time : \n$_runtime"
  fi
}

do_install() {
	
	source "${FILESDIR}/linux58-tkg-config/prepare"
	cd ${wrksrc}/linux-${version}

	local arch subarch _args hdrdest

  	echo "Installing modules..."
  	make INSTALL_MOD_PATH="$DESTDIR" modules_install

  	hdrdest=${DESTDIR}/usr/src/kernel-headers-${_kernver}

  	vinstall .config 644 boot config-${_kernver}
  	vinstall System.map 644 boot System.map-${_kernver}
  	vinstall arch/x86/boot/bzImage 644 boot vmlinuz-${_kernver}

	# Switch to /usr.
        vmkdir usr
        mv ${DESTDIR}/lib ${DESTDIR}/usr

	
        cd ${DESTDIR}/usr/lib/modules/${_kernver}
        rm -f source build
        ln -sf ../../../src/kernel-headers-${_kernver} build

        cd ${wrksrc}/linux-${version}
        # Install required headers to build external modules
        install -Dm644 Makefile ${hdrdest}/Makefile
        install -Dm644 kernel/Makefile ${hdrdest}/kernel/Makefile
        install -Dm644 .config ${hdrdest}/.config
        for file in $(find . -name Kconfig\*); do
                mkdir -p ${hdrdest}/$(dirname $file)
                install -Dm644 $file ${hdrdest}/${file}
        done
        for file in $(find arch/${subarch:-$arch} -name module.lds -o -name Kbuild.platforms -o -name Platform); do
                mkdir -p ${hdrdest}/$(dirname $file)
                install -Dm644 $file ${hdrdest}/${file}
        done
        mkdir -p ${hdrdest}/include
        # Remove firmware stuff provided by the "linux-firmware" pkg.
        rm -rf ${DESTDIR}/usr/lib/firmware

        for i in acpi asm-generic clocksource config crypto drm generated linux \
                math-emu media net pcmcia scsi sound trace uapi vdso video xen dt-bindings; do
                if [ -d include/$i ]; then
                        cp -a include/$i ${hdrdest}/include
                fi
        done

	cd ${wrksrc}/linux-${version}
        mkdir -p ${hdrdest}/arch/x86
        cp -a arch/x86/include ${hdrdest}/arch/x86

	# Copy files necessary for later builds, like nvidia and vmware

	 cp Module.symvers ${hdrdest}
        cp -a scripts ${hdrdest}
        mkdir -p ${hdrdest}/security/selinux
        cp -a security/selinux/include ${hdrdest}/security/selinux
        mkdir -p ${hdrdest}/tools/include
        cp -a tools/include/tools ${hdrdest}/tools/include

        mkdir -p ${hdrdest}/arch/x86/kernel
        cp arch/x86/Makefile ${hdrdest}/arch/x86
        mkdir -p ${hdrdest}/arch/x86/kernel
        cp arch/x86/kernel/asm-offsets.s ${hdrdest}/arch/x86/kernel

	 # add headers for lirc package
        # pci
        for i in bt8xx cx88 saa7134; do
                mkdir -p ${hdrdest}/drivers/media/pci/${i}
                cp -a drivers/media/pci/${i}/*.h ${hdrdest}/drivers/media/pci/${i}
        done
        # usb
        for i in cpia2 em28xx pwc; do
                mkdir -p ${hdrdest}/drivers/media/usb/${i}
                cp -a drivers/media/usb/${i}/*.h ${hdrdest}/drivers/media/usb/${i}
        done
        # i2c
        mkdir -p ${hdrdest}/drivers/media/i2c
        cp drivers/media/i2c/*.h ${hdrdest}/drivers/media/i2c
        for i in cx25840; do
                mkdir -p ${hdrdest}/drivers/media/i2c/${i}
                cp -a drivers/media/i2c/${i}/*.h ${hdrdest}/drivers/media/i2c/${i}
        done

        # Add md headers
        mkdir -p ${hdrdest}/drivers/md
        cp drivers/md/*.h ${hdrdest}/drivers/md

        # Add inotify.h
        mkdir -p ${hdrdest}/include/linux
        cp include/linux/inotify.h ${hdrdest}/include/linux

        # Add wireless headers
	mkdir -p ${hdrdest}/net/mac80211/
        cp net/mac80211/*.h ${hdrdest}/net/mac80211

        # add dvb headers for external modules
        mkdir -p ${hdrdest}/include/config/dvb/
        cp include/config/dvb/*.h ${hdrdest}/include/config/dvb/

        # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
        mkdir -p ${hdrdest}/drivers/media/dvb-frontends
        cp drivers/media/dvb-frontends/lgdt330x.h \
                ${hdrdest}/drivers/media/dvb-frontends/
        cp drivers/media/i2c/msp3400-driver.h ${hdrdest}/drivers/media/i2c/

        # add dvb headers
        mkdir -p ${hdrdest}/drivers/media/usb/dvb-usb
        cp drivers/media/usb/dvb-usb/*.h ${hdrdest}/drivers/media/usb/dvb-usb/
        mkdir -p ${hdrdest}/drivers/media/dvb-frontends
        cp drivers/media/dvb-frontends/*.h ${hdrdest}/drivers/media/dvb-frontends/
        mkdir -p ${hdrdest}/drivers/media/tuners
        cp drivers/media/tuners/*.h ${hdrdest}/drivers/media/tuners/

        # Add xfs and shmem for aufs building
        mkdir -p ${hdrdest}/fs/xfs/libxfs
        mkdir -p ${hdrdest}/mm
        cp fs/xfs/libxfs/xfs_sb.h ${hdrdest}/fs/xfs/libxfs/xfs_sb.h

	 # Add objtool binary, needed to build external modules with dkms
        mkdir -p ${hdrdest}/tools/objtool
        cp tools/objtool/objtool ${hdrdest}/tools/objtool

	# Remove unneeded architectures
        for arch in alpha avr32 blackfin cris frv h8300 \
                ia64 m* s* um v850 xtensa "arm* p*"; do
                rm -rf ${hdrdest}/arch/${arch}
        done

	# Keep arch/x86/ras/Kconfig as it is needed by drivers/ras/Kconfig
        mkdir -p ${hdrdest}/arch/x86/ras
        cp -a arch/x86/ras/Kconfig ${hdrdest}/arch/x86/ras/Kconfig

	 # Extract debugging symbols and compress modules
        msg_normal "$pkgver: extracting debug info and compressing modules, please wait...\n"
        install -Dm644 vmlinux ${DESTDIR}/usr/lib/debug/boot/vmlinux-${_kernver}
        (
        cd ${DESTDIR}
        export DESTDIR
        find ./ -name '*.ko' -print0 | \
                xargs -0r -n1 -P ${XBPS_MAKEJOBS} ${FILESDIR}/mv-debug
        )
        # ... and run depmod again.
        depmod -b ${DESTDIR}/usr -F System.map ${_kernver}
}

linux58-tkg-dbg_package() {
   	preserve=yes
        nostrip=yes
        noverifyrdeps=yes
        noshlibprovides=yes
        repository=debug
        short_desc+=" - debugging symbols"
        pkg_install() {
                vmove usr/lib/debug
        }
}

linux58-tkg-headers_package() {
  short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  nostrip=yes
  preserve=yes
  noshlibprovides=yes
  pkg_install() {
	vmove /usr/src
	vmove /usr/lib/modules/${_kernver}/build
  }
}
