#!/bin/bash

_tkg_srcprep() {
#  msg_normal "Setting version..."
#  cd ${wrksrc}/linux-${version}
#  scripts/setlocalversion --save-scmversion
#  echo "-$revision-tkg-${_cpusched}" > localversion.10-pkgrel
#  echo "" > localversion.20-pkgname
version=5.8.1

  source ${FILESDIR}/customization.cfg

  # add upstream patch
  #patch -p1 -i ../patch-"${pkgver}"

  cd ${wrksrc}/linux-${version}

  # ARCH Patches
  if [ "${_configfile}" == "config_hardened.x86_64" ] && [ "${_cpusched}" == "cfs" ]; then
    msg_normal "Using linux hardened patchset"
    patch -Np1 < ${FILESDIR}/linux58-tkg-patches/0012-linux-hardened.patch
#  else
#    patch -Np1 < ${FILESDIR}/linux58-tkg-patches/0001-add-sysctl-to-disallow-unprivileged-CLONE_NEWUSER-by.patch
  fi

  # graysky's cpu opts - https://github.com/graysky2/kernel_gcc_patch
  msg_normal "Applying graysky's cpu opts patch"
  patch -Np1 -i ${wrksrc}/enable_additional_cpu_optimizations_for_gcc_v10.1+_kernel_v5.8+.patch

  # TkG
  msg_normal "Applying clear linux patches"
  patch -Np1 < ${FILESDIR}/linux58-tkg-patches/0002-clear-patches.patch

  msg_normal "Applying glitched base patch"
  patch -Np1 < ${FILESDIR}/linux58-tkg-patches/0003-glitched-base.patch

  if [ "$_misc_adds" = "true" ]; then
    msg_normal "Applying misc additions patch"
    patch -Np1 < ${FILESDIR}/linux58-tkg-patches/0012-misc-additions.patch
  fi

  if [ "${_cpusched}" == "MuQSS" ]; then
    # MuQSS
    patch -Np1 < ${FILESDIR}/linux58-tkg-patches/0004-5.8-ck1.patch
    if [ "${_aggressive_ondemand}" == "true" ]; then
      patch -Np1 < ${FILESDIR}/linux58-tkg-patches/0004-glitched-ondemand-muqss.patch
    fi
    patch -Np1 < ${FILESDIR}/linux58-tkg-patches/0004-glitched-muqss.patch
  elif [ "${_cpusched}" == "pds" ]; then
    # PDS-mq
    patch -Np1 < ${FILESDIR}/linux58-tkg-patches/0005-v5.8_undead-pds099o.patch
    if [ "${_aggressive_ondemand}" == "true" ]; then
      patch -Np1 < ${FILESDIR}/linux58-tkg-patches/0005-glitched-ondemand-pds.patch
    fi
    patch -Np1 < ${FILESDIR}/linux58-tkg-patches/0005-glitched-pds.patch
  elif [ "${_cpusched}" == "bmq" ]; then
    # Project C / BMQ
    patch -Np1 < ${FILESDIR}/linux58-tkg-patches/0009-prjc_v5.8-r0.patch
    if [ "${_aggressive_ondemand}" == "true" ]; then
      patch -Np1 < ${FILESDIR}/linux58-tkg-patches/0009-glitched-ondemand-bmq.patch
    fi
    patch -Np1 < ${FILESDIR}/linux58-tkg-patches/0009-glitched-bmq.patch
  else
    patch -Np1 < ${FILESDIR}/linux58-tkg-patches/0003-glitched-cfs.patch
  fi

  if [ -z "${_configfile}" ]; then
    _configfile="config.x86_64"
  fi

  cat "${FILESDIR}/linux58-tkg-config/${_configfile}" > ${wrksrc}/linux-${version}/.config

  # Set some -tkg defaults
  echo "# CONFIG_DYNAMIC_FAULT is not set" >> ${wrksrc}/linux-${version}/.config
  sed -i -e 's/CONFIG_DEFAULT_FQ_CODEL=y/# CONFIG_DEFAULT_FQ_CODEL is not set/' ${wrksrc}/linux-${version}/.config
  echo "CONFIG_DEFAULT_CAKE=y" >> ${wrksrc}/linux-${version}/.config
  echo "CONFIG_NR_TTY_DEVICES=63" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_NTP_PPS is not set" >> ${wrksrc}/linux-${version}/.config
  sed -i -e 's/CONFIG_CRYPTO_LZ4=m/CONFIG_CRYPTO_LZ4=y/' ${wrksrc}/linux-${version}/.config
  sed -i -e 's/CONFIG_CRYPTO_LZ4HC=m/CONFIG_CRYPTO_LZ4HC=y/' ${wrksrc}/linux-${version}/.config
  sed -i -e 's/CONFIG_LZ4_COMPRESS=m/CONFIG_LZ4_COMPRESS=y/' ${wrksrc}/linux-${version}/.config
  sed -i -e 's/CONFIG_LZ4HC_COMPRESS=m/CONFIG_LZ4HC_COMPRESS=y/' ${wrksrc}/linux-${version}/.config
  sed -i -e 's/CONFIG_ZSWAP_COMPRESSOR_DEFAULT_LZO=y/# CONFIG_ZSWAP_COMPRESSOR_DEFAULT_LZO is not set/' ${wrksrc}/linux-${version}/.config
  sed -i -e 's/# CONFIG_ZSWAP_COMPRESSOR_DEFAULT_LZ4 is not set/CONFIG_ZSWAP_COMPRESSOR_DEFAULT_LZ4=y/' ${wrksrc}/linux-${version}/.config
  sed -i -e 's/CONFIG_ZSWAP_COMPRESSOR_DEFAULT="lzo"/CONFIG_ZSWAP_COMPRESSOR_DEFAULT="lz4"/' ${wrksrc}/linux-${version}/.config
  #sed -i -e 's/CONFIG_RCU_BOOST_DELAY=500/CONFIG_RCU_BOOST_DELAY=0/' ${wrksrc}/linux-${version}/.config
  sed -i -e 's/# CONFIG_CMDLINE_BOOL is not set/CONFIG_CMDLINE_BOOL=y/' ${wrksrc}/linux-${version}/.config
  echo "CONFIG_CMDLINE=\"${_custom_commandline}\"" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_CMDLINE_OVERRIDE is not set" >> ${wrksrc}/linux-${version}/.config
  if [ "$_noccache" != "true" ] && pacman -Qq ccache &> /dev/null; then
    sed -i -e 's/CONFIG_GCC_PLUGINS=y/# CONFIG_GCC_PLUGINS is not set/' ${wrksrc}/linux-${version}/.config
  fi

  if [ "$_font_autoselect" != "false" ]; then
    sed -i -e 's/CONFIG_FONT_TER16x32=y/# CONFIG_FONT_TER16x32 is not set\nCONFIG_FONT_AUTOSELECT=y/' ${wrksrc}/linux-${version}/.config
  fi

  # Inject cpuopts options
  echo "# CONFIG_MK8SSE3 is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MK10 is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MBARCELONA is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MBOBCAT is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MJAGUAR is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MBULLDOZER is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MPILEDRIVER is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MSTEAMROLLER is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MEXCAVATOR is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MZEN is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MZEN2 is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MATOM is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MNEHALEM is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MWESTMERE is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MSILVERMONT is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MSANDYBRIDGE is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MIVYBRIDGE is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MHASWELL is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MBROADWELL is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MSKYLAKE is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MSKYLAKEX is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MCANNONLAKE is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MICELAKE is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MGOLDMONT is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MGOLDMONTPLUS is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MCASCADELAKE is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MCOOPERLAKE is not set" >> ${wrksrc}/linux-${version}/.config
  echo "# CONFIG_MTIGERLAKE is not set" >> ${wrksrc}/linux-${version}/.config

  # Disable some debugging
  if [ "${_debugdisable}" == "true" ]; then
    sed -i -e 's/CONFIG_SLUB_DEBUG=y/# CONFIG_SLUB_DEBUG is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/CONFIG_PM_DEBUG=y/# CONFIG_PM_DEBUG is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/CONFIG_PM_ADVANCED_DEBUG=y/# CONFIG_PM_ADVANCED_DEBUG is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/CONFIG_PM_SLEEP_DEBUG=y/# CONFIG_PM_SLEEP_DEBUG is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/CONFIG_ACPI_DEBUG=y/# CONFIG_ACPI_DEBUG is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/CONFIG_SCHED_DEBUG=y/# CONFIG_SCHED_DEBUG is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/CONFIG_LATENCYTOP=y/# CONFIG_LATENCYTOP is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/CONFIG_DEBUG_PREEMPT=y/# CONFIG_DEBUG_PREEMPT is not set/' ${wrksrc}/linux-${version}/.config
  fi

  if [ "${_cpusched}" == "MuQSS" ]; then
    # MuQSS default config
    echo "CONFIG_SCHED_MUQSS=y" >> ${wrksrc}/linux-${version}/.config
  elif [ "${_cpusched}" == "pds" ]; then
    # PDS default config
    echo "CONFIG_SCHED_PDS=y" >> ${wrksrc}/linux-${version}/.config
  elif [ "${_cpusched}" == "bmq" ]; then
    # BMQ default config
    echo "CONFIG_SCHED_ALT=y" >> ${wrksrc}/linux-${version}/.config
  fi

  if [ "${_cpusched}" == "MuQSS" ] || [ "${_cpusched}" == "pds" ] || [ "${_cpusched}" == "bmq" ]; then
    # Disable CFS
    sed -i -e 's/CONFIG_FAIR_GROUP_SCHED=y/# CONFIG_FAIR_GROUP_SCHED is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/CONFIG_CFS_BANDWIDTH=y/# CONFIG_CFS_BANDWIDTH is not set/' ${wrksrc}/linux-${version}/.config
    # sched yield type
    if [ -n "$_sched_yield_type" ]; then
      CONDITION0="$_sched_yield_type"
    else
      echo ""
      echo "CPU sched_yield_type - Choose what sort of yield sched_yield will perform."
      echo ""
      echo "For PDS and MuQSS:"
      echo "0: No yield."
      echo "1: Yield only to better priority/deadline tasks."
      echo "2: Expire timeslice and recalculate deadline."
      echo ""
      echo "For BMQ (experimental) - No recommended value yet, so try for yourself x) :"
      echo "0: No yield."
      echo "1: Deboost and requeue task. (default)"
      echo "2: Set rq skip task."
      read -rp "`echo $'\n    > 0. Recommended option for gaming on PDS and MuQSS - "tkg" default\n      1. Default, but can lead to stability issues on some platforms\n      2. Can be a good option with low rr_interval on MuQSS\n    [0-2?]: '`" CONDITION0;
    fi
    if [ "$CONDITION0" == "1" ]; then
      echo "Using default CPU sched yield type (1)"
    elif [ "$CONDITION0" == "2" ]; then
      sed -i -e 's/int sched_yield_type __read_mostly = 1;/int sched_yield_type __read_mostly = 2;/' ./kernel/sched/alt_core.c
    else
      sed -i -e 's/int sched_yield_type __read_mostly = 1;/int sched_yield_type __read_mostly = 0;/' ./kernel/sched/alt_core.c
    fi
  fi

  # Round Robin interval
  if [ "${_cpusched}" == "MuQSS" ] || [ "${_cpusched}" == "pds" ] || [ "${_cpusched}" == "bmq" ]; then
    if [ -n "$_rr_interval" ]; then
      CONDITION1="$_rr_interval"
    else
      echo ""
      echo "Round Robin interval is the longest duration two tasks with the same nice level will"
      echo "be delayed for. When CPU time is requested by a task, it receives a time slice equal"
      echo "to the rr_interval in addition to a virtual deadline. When using yield_type 2, a low"
      echo "value can help offset the disadvantages of rescheduling a process that has yielded."
      echo ""
      echo "MuQSS default: 6ms"
      echo "PDS default: 4ms"
      echo "BMQ default: 2ms"
      read -rp "`echo $'\n    > 0.Keep defaults\n      1.2ms\n      2.4ms\n      3.6ms\n      4.8ms\n    [0-4?]: '`" CONDITION1;
    fi
    if [ "$CONDITION1" == "1" ]; then
      echo "Using 2ms rr_interval"
      _rrvalue="2"
    elif [ "$CONDITION1" == "2" ]; then
      echo "Using 4ms rr_interval"
      _rrvalue="4"
    elif [ "$CONDITION1" == "3" ]; then
      echo "Using 6ms rr_interval"
      _rrvalue="6"
    elif [ "$CONDITION1" == "4" ]; then
      echo "Using 8ms rr_interval"
      _rrvalue="8"
    else
      echo "Using default rr_interval"
      _rrvalue="default"
    fi
    if [ "$_rrvalue" != "default" ]; then
      if [ "${_cpusched}" == "MuQSS" ]; then
        sed -i -e "s/int rr_interval __read_mostly = 6;/int rr_interval __read_mostly = ${_rrvalue};/" ./kernel/sched/"${_cpusched}".c
      elif [ "${_cpusched}" == "pds" ]; then
        sed -i -e "s/#define SCHED_DEFAULT_RR (4)/#define SCHED_DEFAULT_RR (${_rrvalue})/" ./kernel/sched/"${_cpusched}".c
      elif [ "${_cpusched}" == "bmq" ]; then
        sed -i -e "s/u64 sched_timeslice_ns __read_mostly = (4 * 1000 * 1000);/u64 sched_timeslice_ns __read_mostly = (${_rrvalue} * 1000 * 1000);/" ./kernel/sched/alt_core.c
      fi
    else
      if [ "${_cpusched}" == "bmq" ]; then
        sed -i -e "s/u64 sched_timeslice_ns __read_mostly = (4 * 1000 * 1000);/u64 sched_timeslice_ns __read_mostly = (2 * 1000 * 1000);/" ./kernel/sched/alt_core.c
      fi
    fi
  fi

  # zenify
  if [ "$_zenify" == "true" ]; then
    echo "CONFIG_ZENIFY=y" >> ${wrksrc}/linux-${version}/.config
  elif [ "$_zenify" == "false" ]; then
    echo "# CONFIG_ZENIFY is not set" >> ${wrksrc}/linux-${version}/.config
  fi

  # compiler optimization level
  if [ "$_compileroptlevel" == "1" ]; then
    echo "# CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3 is not set" >> ${wrksrc}/linux-${version}/.config
  elif [ "$_compileroptlevel" == "2" ]; then
    sed -i -e 's/CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y/# CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE is not set/' ${wrksrc}/linux-${version}/.config
    echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=y" >> ${wrksrc}/linux-${version}/.config
  elif [ "$_compileroptlevel" == "3" ]; then
    sed -i -e 's/CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y/# CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/# CONFIG_CC_OPTIMIZE_FOR_SIZE is not set/CONFIG_CC_OPTIMIZE_FOR_SIZE=y/' ${wrksrc}/linux-${version}/.config
    echo "# CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3 is not set" >> ${wrksrc}/linux-${version}/.config
  fi

  # cpu opt
  if [ -n "$_processor_opt" ] && [ "$_processor_opt" != "native" ]; then
    echo "# CONFIG_MNATIVE is not set" >> ${wrksrc}/linux-${version}/.config
  fi

  if [ -n "$_processor_opt" ] && [ "$_processor_opt" != "generic" ]; then
    sed -i -e 's/CONFIG_GENERIC_CPU=y/# CONFIG_GENERIC_CPU is not set/' ${wrksrc}/linux-${version}/.config
  fi

  if [ "$_processor_opt" == "native" ]; then
    echo "CONFIG_MNATIVE=y" >> ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "k8" ]; then
    sed -i -e 's/# CONFIG_MK8 is not set/CONFIG_MK8=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "k8sse3" ]; then
    sed -i -e 's/# CONFIG_MK8SSE3 is not set/CONFIG_MK8SSE3=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "k10" ]; then
    sed -i -e 's/# CONFIG_MK10 is not set/CONFIG_MK10=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "barcelona" ]; then
    sed -i -e 's/# CONFIG_MBARCELONA is not set/CONFIG_MBARCELONA=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "bobcat" ]; then
    sed -i -e 's/# CONFIG_MBOBCAT is not set/CONFIG_MBOBCAT=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "jaguar" ]; then
    sed -i -e 's/# CONFIG_MJAGUAR is not set/CONFIG_MJAGUAR=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "bulldozer" ]; then
    sed -i -e 's/# CONFIG_MBULLDOZER is not set/CONFIG_MBULLDOZER=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "piledriver" ]; then
    sed -i -e 's/# CONFIG_MPILEDRIVER is not set/CONFIG_MPILEDRIVER=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "steamroller" ]; then
    sed -i -e 's/# CONFIG_MSTEAMROLLER is not set/CONFIG_MSTEAMROLLER=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "excavator" ]; then
    sed -i -e 's/# CONFIG_MEXCAVATOR is not set/CONFIG_MEXCAVATOR=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "zen" ]; then
    sed -i -e 's/# CONFIG_MZEN is not set/CONFIG_MZEN=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "zen2" ]; then
    sed -i -e 's/# CONFIG_MZEN2 is not set/CONFIG_MZEN2=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "mpsc" ]; then
    sed -i -e 's/# CONFIG_MPSC is not set/CONFIG_MPSC=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "atom" ]; then
    sed -i -e 's/# CONFIG_MATOM is not set/CONFIG_MATOM=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "core2" ]; then
    sed -i -e 's/# CONFIG_MCORE2 is not set/CONFIG_MCORE2=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "nehalem" ]; then
    sed -i -e 's/# CONFIG_MNEHALEM is not set/CONFIG_MNEHALEM=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "westmere" ]; then
    sed -i -e 's/# CONFIG_MWESTMERE is not set/CONFIG_MWESTMERE=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "silvermont" ]; then
    sed -i -e 's/# CONFIG_MSILVERMONT is not set/CONFIG_MSILVERMONT=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "sandybridge" ]; then
    sed -i -e 's/# CONFIG_MSANDYBRIDGE is not set/CONFIG_MSANDYBRIDGE=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "ivybridge" ]; then
    sed -i -e 's/# CONFIG_MIVYBRIDGE is not set/CONFIG_MIVYBRIDGE=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "haswell" ]; then
    sed -i -e 's/# CONFIG_MHASWELL is not set/CONFIG_MHASWELL=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "broadwell" ]; then
    sed -i -e 's/# CONFIG_MBROADWELL is not set/CONFIG_MBROADWELL=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "skylake" ]; then
    sed -i -e 's/# CONFIG_MSKYLAKE is not set/CONFIG_MSKYLAKE=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "skylakex" ]; then
    sed -i -e 's/# CONFIG_MSKYLAKEX is not set/CONFIG_MSKYLAKEX=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "cannonlake" ]; then
    sed -i -e 's/# CONFIG_MCANNONLAKE is not set/CONFIG_MCANNONLAKE=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "icelake" ]; then
    sed -i -e 's/# CONFIG_MICELAKE is not set/CONFIG_MICELAKE=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "goldmont" ]; then
    sed -i -e 's/# CONFIG_MGOLDMONT is not set/CONFIG_MGOLDMONT=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "goldmontplus" ]; then
    sed -i -e 's/# CONFIG_MGOLDMONTPLUS is not set/CONFIG_MGOLDMONTPLUS=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "cascadelake" ]; then
    sed -i -e 's/# CONFIG_MCASCADELAKE is not set/CONFIG_MCASCADELAKE=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "cooperlake" ]; then
    sed -i -e 's/# CONFIG_MCOOPERLAKE is not set/CONFIG_MCOOPERLAKE=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_processor_opt" == "tigerlake" ]; then
    sed -i -e 's/# CONFIG_MTIGERLAKE is not set/CONFIG_MTIGERLAKE=y/' ${wrksrc}/linux-${version}/.config
  fi

  # irq threading
  if [ "$_irq_threading" == "true" ]; then
    echo "CONFIG_FORCE_IRQ_THREADING=y" >> ${wrksrc}/linux-${version}/.config
  elif [ "$_irq_threading" == "false" ]; then
    echo "# CONFIG_FORCE_IRQ_THREADING is not set" >> ${wrksrc}/linux-${version}/.config
  fi

  # smt nice
  if [ "$_smt_nice" == "true" ]; then
    echo "CONFIG_SMT_NICE=y" >> ${wrksrc}/linux-${version}/.config
  elif [ "$_smt_nice" == "false" ]; then
    echo "# CONFIG_SMT_NICE is not set" >> ${wrksrc}/linux-${version}/.config
  fi

  # random trust cpu
  if [ "$_random_trust_cpu" == "true" ]; then
    sed -i -e 's/# CONFIG_RANDOM_TRUST_CPU is not set/CONFIG_RANDOM_TRUST_CPU=y/' ${wrksrc}/linux-${version}/.config
  fi

  # rq sharing
  if [ "$_runqueue_sharing" == "none" ]; then
    echo -e "CONFIG_RQ_NONE=y\n# CONFIG_RQ_SMT is not set\n# CONFIG_RQ_MC is not set\n# CONFIG_RQ_MC_LLC is not set\n# CONFIG_RQ_SMP is not set\n# CONFIG_RQ_ALL is not set" >> ${wrksrc}/linux-${version}/.config
  elif [ -z "$_runqueue_sharing" ] || [ "$_runqueue_sharing" == "smt" ]; then
    echo -e "# CONFIG_RQ_NONE is not set\nCONFIG_RQ_SMT=y\n# CONFIG_RQ_MC is not set\n# CONFIG_RQ_MC_LLC is not set\n# CONFIG_RQ_SMP is not set\n# CONFIG_RQ_ALL is not set" >> ${wrksrc}/linux-${version}/.config
  elif [ "$_runqueue_sharing" == "mc" ]; then
    echo -e "# CONFIG_RQ_NONE is not set\n# CONFIG_RQ_SMT is not set\nCONFIG_RQ_MC=y\n# CONFIG_RQ_MC_LLC is not set\n# CONFIG_RQ_SMP is not set\n# CONFIG_RQ_ALL is not set" >> ${wrksrc}/linux-${version}/.config
  elif [ "$_runqueue_sharing" == "smp" ]; then
    echo -e "# CONFIG_RQ_NONE is not set\n# CONFIG_RQ_SMT is not set\n# CONFIG_RQ_MC is not set\n# CONFIG_RQ_MC_LLC is not set\nCONFIG_RQ_SMP=y\n# CONFIG_RQ_ALL is not set" >> ${wrksrc}/linux-${version}/.config
  elif [ "$_runqueue_sharing" == "all" ]; then
    echo -e "# CONFIG_RQ_NONE is not set\n# CONFIG_RQ_SMT is not set\n# CONFIG_RQ_MC is not set\n# CONFIG_RQ_MC_LLC is not set\n# CONFIG_RQ_SMP is not set\nCONFIG_RQ_ALL=y" >> ${wrksrc}/linux-${version}/.config
  elif [ "$_runqueue_sharing" == "mc-llc" ]; then
    echo -e "# CONFIG_RQ_NONE is not set\n# CONFIG_RQ_SMT is not set\n# CONFIG_RQ_MC is not set\nCONFIG_RQ_MC_LLC=y\n# CONFIG_RQ_SMP is not set\n# CONFIG_RQ_ALL is not set" >> ${wrksrc}/linux-${version}/.config
  fi

  # timer freq
  if [ -n "$_timer_freq" ] && [ "$_timer_freq" != "300" ]; then
    sed -i -e 's/CONFIG_HZ_300=y/# CONFIG_HZ_300 is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/CONFIG_HZ_300_NODEF=y/# CONFIG_HZ_300_NODEF is not set/' ${wrksrc}/linux-${version}/.config
    if [ "$_timer_freq" == "1000" ]; then
      sed -i -e 's/# CONFIG_HZ_1000 is not set/CONFIG_HZ_1000=y/' ${wrksrc}/linux-${version}/.config
      sed -i -e 's/CONFIG_HZ=300/CONFIG_HZ=1000/' ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_500 is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_500_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_750 is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_750_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      echo "CONFIG_HZ_1000_NODEF=y" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_250_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_300_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
    elif [ "$_timer_freq" == "750" ]; then
      sed -i -e 's/CONFIG_HZ=300/CONFIG_HZ=750/' ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_500 is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_500_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      echo "CONFIG_HZ_750=y" >> ${wrksrc}/linux-${version}/.config
      echo "CONFIG_HZ_750_NODEF=y" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_1000_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_250_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_300_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
    elif [ "$_timer_freq" == "500" ]; then
      sed -i -e 's/CONFIG_HZ=300/CONFIG_HZ=500/' ${wrksrc}/linux-${version}/.config
      echo "CONFIG_HZ_500=y" >> ${wrksrc}/linux-${version}/.config
      echo "CONFIG_HZ_500_NODEF=y" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_750 is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_750_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_1000_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_250_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_300_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
    elif [ "$_timer_freq" == "100" ]; then
      sed -i -e 's/CONFIG_HZ=300/CONFIG_HZ=100/' ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_500 is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_750 is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_1000_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_750_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_500_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_250_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_300_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      echo "CONFIG_HZ_100=y" >> ${wrksrc}/linux-${version}/.config
      echo "CONFIG_HZ_100_NODEF=y" >> ${wrksrc}/linux-${version}/.config
    fi
  elif [ "${_cpusched}" == "MuQSS" ] && [ -z "$_timer_freq" ]; then
      sed -i -e 's/CONFIG_HZ=300/CONFIG_HZ=100/' ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_500 is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_750 is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_1000_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_750_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_500_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_250_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_HZ_300_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      echo "CONFIG_HZ_100=y" >> ${wrksrc}/linux-${version}/.config
      echo "CONFIG_HZ_100_NODEF=y" >> ${wrksrc}/linux-${version}/.config
  else
    sed -i -e 's/CONFIG_HZ_300=y/# CONFIG_HZ_300 is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/CONFIG_HZ_300_NODEF=y/# CONFIG_HZ_300_NODEF is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/CONFIG_HZ=300/CONFIG_HZ=500/' ${wrksrc}/linux-${version}/.config
    echo "CONFIG_HZ_500=y" >> ${wrksrc}/linux-${version}/.config
    echo "CONFIG_HZ_500_NODEF=y" >> ${wrksrc}/linux-${version}/.config
    echo "# CONFIG_HZ_250_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
    echo "# CONFIG_HZ_300_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
  fi

  # default cpu gov
  if [ "$_default_cpu_gov" == "performance" ]; then
    sed -i -e 's/CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL=y/# CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/# CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE is not set/CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE=y/' ${wrksrc}/linux-${version}/.config
  elif [ "$_default_cpu_gov" == "ondemand" ]; then
    sed -i -e 's/CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL=y/# CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/# CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND is not set/CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND=y/' ${wrksrc}/linux-${version}/.config
  fi

  # ACPI_CPUFREQ disablement
  if [ "$_disable_acpi_cpufreq" == "true" ]; then
    sed -i -e 's/CONFIG_X86_ACPI_CPUFREQ=m/# CONFIG_X86_ACPI_CPUFREQ is not set/' ${wrksrc}/linux-${version}/.config
  fi

  # ftrace
  if [ -z "$_ftracedisable" ]; then
    echo ""
    echo "Disable FUNCTION_TRACER/GRAPH_TRACER? Lowers overhead but limits debugging"
    echo "and analyzing of kernel functions."
    read -rp "`echo $'    > N/y : '`" CONDITION2;
  fi
  if [ "$CONDITION2" == "y" ] || [ "$_ftracedisable" == "true" ]; then
    sed -i -e 's/CONFIG_FUNCTION_TRACER=y/# CONFIG_FUNCTION_TRACER is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/CONFIG_FUNCTION_GRAPH_TRACER=y/# CONFIG_FUNCTION_GRAPH_TRACER is not set/' ${wrksrc}/linux-${version}/.config
  fi

  # disable numa
  if [ -z "$_numadisable" ]; then
    echo ""
    echo "Disable NUMA? Lowers overhead, but breaks CUDA/NvEnc on Nvidia if disabled."
    echo "https://bbs.archlinux.org/viewtopic.php?id=239174"
    read -rp "`echo $'    > N/y : '`" CONDITION3;
  fi
  if [ "$CONDITION3" == "y" ] || [ "$_numadisable" == "true" ]; then
    # disable NUMA since 99.9% of users do not have multiple CPUs but do have multiple cores in one CPU
    sed -i -e 's/CONFIG_NUMA=y/# CONFIG_NUMA is not set/' \
        -i -e '/CONFIG_AMD_NUMA=y/d' \
        -i -e '/CONFIG_X86_64_ACPI_NUMA=y/d' \
        -i -e '/CONFIG_NODES_SPAN_OTHER_NODES=y/d' \
        -i -e '/# CONFIG_NUMA_EMU is not set/d' \
        -i -e '/CONFIG_NODES_SHIFT=6/d' \
        -i -e '/CONFIG_NEED_MULTIPLE_NODES=y/d' \
        -i -e '/CONFIG_USE_PERCPU_NUMA_NODE_ID=y/d' \
        -i -e '/CONFIG_ACPI_NUMA=y/d' ${wrksrc}/linux-${version}/.config
  fi

  # tickless
  if [ -z "$_tickless" ]; then
    echo ""
    echo "Use CattaRappa mode (Tickless/Dynticks) ?"
    echo "Can give higher performances in many cases but lower consistency on some hardware."
    echo "Just tickless idle can perform better with some platforms (mostly AMD) or CPU schedulers (mostly MuQSS)."
    if [ "${_cpusched}" == "MuQSS" ]; then
      read -rp "`echo $'\n      0.No, use periodic ticks\n      1.Yes, full tickless baby!\n    > 2.Just tickless idle plz\n    [0-2?]: '`" CONDITION4;
    else
      read -rp "`echo $'\n      0.No, use periodic ticks\n    > 1.Yes, full tickless baby!\n      2.Just tickless idle plz\n    [0-2?]: '`" CONDITION4;
    fi
  fi
  if [ "$CONDITION4" == "0" ] || [ "$_tickless" == "0" ]; then
    echo "# CONFIG_NO_HZ_FULL_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
    sed -i -e 's/# CONFIG_HZ_PERIODIC is not set/CONFIG_HZ_PERIODIC=y/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/CONFIG_NO_HZ_IDLE=y/# CONFIG_NO_HZ_IDLE is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/CONFIG_NO_HZ_FULL=y/# CONFIG_NO_HZ_FULL is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/CONFIG_NO_HZ=y/# CONFIG_NO_HZ is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/CONFIG_NO_HZ_COMMON=y/# CONFIG_NO_HZ_COMMON is not set/' ${wrksrc}/linux-${version}/.config
  elif [ "$CONDITION4" == "2" ] || [ "$_tickless" == "2" ]; then
    echo "# CONFIG_NO_HZ_FULL_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
    sed -i -e 's/CONFIG_HZ_PERIODIC=y/# CONFIG_HZ_PERIODIC is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/# CONFIG_NO_HZ_IDLE is not set/CONFIG_NO_HZ_IDLE=y/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/CONFIG_NO_HZ_FULL=y/# CONFIG_NO_HZ_FULL is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/# CONFIG_NO_HZ is not set/CONFIG_NO_HZ=y/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/# CONFIG_NO_HZ_COMMON is not set/CONFIG_NO_HZ_COMMON=y/' ${wrksrc}/linux-${version}/.config
  else
    if [ "${_cpusched}" == "MuQSS" ]; then
      echo "# CONFIG_NO_HZ_FULL_NODEF is not set" >> ${wrksrc}/linux-${version}/.config
      sed -i -e 's/CONFIG_HZ_PERIODIC=y/# CONFIG_HZ_PERIODIC is not set/' ${wrksrc}/linux-${version}/.config
      sed -i -e 's/# CONFIG_NO_HZ_IDLE is not set/CONFIG_NO_HZ_IDLE=y/' ${wrksrc}/linux-${version}/.config
      sed -i -e 's/CONFIG_NO_HZ_FULL=y/# CONFIG_NO_HZ_FULL is not set/' ${wrksrc}/linux-${version}/.config
      sed -i -e 's/# CONFIG_NO_HZ is not set/CONFIG_NO_HZ=y/' ${wrksrc}/linux-${version}/.config
      sed -i -e 's/# CONFIG_NO_HZ_COMMON is not set/CONFIG_NO_HZ_COMMON=y/' ${wrksrc}/linux-${version}/.config
    else
      echo "CONFIG_NO_HZ_FULL_NODEF=y" >> ${wrksrc}/linux-${version}/.config
      sed -i -e 's/CONFIG_HZ_PERIODIC=y/# CONFIG_HZ_PERIODIC is not set/' ${wrksrc}/linux-${version}/.config
      sed -i -e 's/CONFIG_NO_HZ_IDLE=y/# CONFIG_NO_HZ_IDLE is not set/' ${wrksrc}/linux-${version}/.config
      sed -i -e 's/# CONFIG_NO_HZ_FULL is not set/CONFIG_NO_HZ_FULL=y/' ${wrksrc}/linux-${version}/.config
      sed -i -e 's/# CONFIG_NO_HZ is not set/CONFIG_NO_HZ=y/' ${wrksrc}/linux-${version}/.config
      sed -i -e 's/# CONFIG_NO_HZ_COMMON is not set/CONFIG_NO_HZ_COMMON=y/' ${wrksrc}/linux-${version}/.config
      echo "CONFIG_CONTEXT_TRACKING=y" >> ${wrksrc}/linux-${version}/.config
      echo "# CONFIG_CONTEXT_TRACKING_FORCE is not set" >> ${wrksrc}/linux-${version}/.config
    fi
  fi

  # voluntary preempt
  if [ -z "$_voluntary_preempt" ]; then
    echo ""
    echo "Use explicit preemption points?"
    echo "It can improve latency on PDS (at the cost of throughput)"
    echo "and improve throughput on other schedulers (at the cost of latency)"
    read -rp "`echo $'    > N/y : '`" CONDITION5;
  fi
  if [ "$CONDITION5" == "y" ] || [ "$_voluntary_preempt" == "true" ]; then
    sed -i -e 's/CONFIG_PREEMPT=y/# CONFIG_PREEMPT is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/CONFIG_PREEMPT_LL=y/# CONFIG_PREEMPT_LL is not set/' ${wrksrc}/linux-${version}/.config
    sed -i -e 's/# CONFIG_PREEMPT_VOLUNTARY is not set/CONFIG_PREEMPT_VOLUNTARY=y/' ${wrksrc}/linux-${version}/.config
  fi

  # Open Firmware support
  if [ -z "$_OFenable" ]; then
    echo ""
    echo "Enable Device Tree and Open Firmware support?"
    read -rp "`echo $'    > N/y : '`" CONDITION6;
  fi
  if [ "$CONDITION6" == "y" ] || [ "$_OFenable" == "true" ]; then
    sed -i -e 's/# CONFIG_OF is not set/CONFIG_OF=y/' ${wrksrc}/linux-${version}/.config
  fi

  # acs override
  if [ -z "$_acs_override" ]; then
    echo ""
    echo "Use ACS override patch?"
    echo "https://wiki.archlinux.org/index.php/PCI_passthrough_via_OVMF#Bypassing_the_IOMMU_groups_.28ACS_override_patch.29"
    read -rp "`echo $'    > N/y : '`" CONDITION7;
  fi
  if [ "$CONDITION7" == "y" ] || [ "$_acs_override" == "true" ]; then
    patch -Np1 < ${FILESDIR}/linux58-tkg-patches/0006-add-acs-overrides_iommu.patch
  fi

  # bcachefs
#  if [ -z "$_bcachefs" ]; then
#     echo ""
#     echo "Add Bcache filesystem support? You'll have to install bcachefs-tools-git from AUR for utilities."
#     echo "https://bcachefs.org/"
#     read -rp "`echo $'    > N/y : '`" CONDITION8;
#   fi
#   if [ "$CONDITION8" == "y" ] || [ "$_bcachefs" == "true" ]; then
#     patch -Np1 < ${FILESDIR}/linux58-tkg-patches/0008-5.8-bcachefs.patch
#     echo "CONFIG_BCACHEFS_FS=m" >> ${wrksrc}/linux-${version}/.config
#     echo "CONFIG_BCACHEFS_QUOTA=y" >> ${wrksrc}/linux-${version}/.config
#     echo "CONFIG_BCACHEFS_POSIX_ACL=y" >> ${wrksrc}/linux-${version}/.config
#     echo "# CONFIG_BCACHEFS_DEBUG is not set" >> ${wrksrc}/linux-${version}/.config
#     echo "# CONFIG_BCACHEFS_TESTS is not set" >> ${wrksrc}/linux-${version}/.config
#     echo "# CONFIG_DEBUG_CLOSURES is not set" >> ${wrksrc}/linux-${version}/.config
#   fi

  # fsync support
  if [ -z "$_fsync" ]; then
    echo ""
    echo "Enable support for fsync, an experimental replacement for esync in Valve Proton 4.11+"
    echo "https://steamcommunity.com/games/221410/announcements/detail/2957094910196249305"
    read -rp "`echo $'    > N/y : '`" CONDITION9;
  fi
  if [ "$CONDITION9" == "y" ] || [ "$_fsync" == "true" ]; then
    patch -Np1 < ${FILESDIR}/linux58-tkg-patches/0007-v5.8-fsync.patch
  fi

  # ZFS fix
  if [ -z "$_zfsfix" ]; then
    echo ""
    echo "Add back missing symbol for AES-NI/AVX support on ZFS"
    echo "https://github.com/NixOS/nixpkgs/blob/master/pkgs/os-specific/linux/kernel/export_kernel_fpu_functions_5_3.patch"
    read -rp "`echo $'    > N/y : '`" CONDITION11;
  fi
  if [ "$CONDITION11" == "y" ] || [ "$_zfsfix" == "true" ]; then
    patch -Np1 < ${FILESDIR}/linux58-tkg-patches/0011-ZFS-fix.patch
  fi

  # Community patches
  if [ -n "$_community_patches" ]; then
    if [ ! -d "$_where/../../community-patches" ]; then
      cd "$_where/../.." && git clone https://github.com/Frogging-Family/community-patches.git && cd "${srcdir}/linux-${_basekernel}"
    fi
    _community_patches=($_community_patches)
    for _p in ${_community_patches[@]}; do
      ln -s "$_where"/../../community-patches/linux58-tkg/$_p "$_where"/
    done
  fi

  # userpatches
  if [ "$_user_patches" == "true" ]; then
    _userpatch_target="linux-${_basekernel}"
    _userpatch_ext="my"
    user_patcher
  fi

  # Community patches removal
  for _p in ${_community_patches[@]}; do
    rm -f "$_where"/$_p
  done

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh

  # get kernel version
  make prepare

  # localmodconfig
  if [ -z "$_modprobeddb" ]; then
    echo ""
    echo "Use localmodconfig to clean config from unneeded modules?"
    echo "Speeds up compilation considerably by only using loaded modules."
    read -rp "`echo $'    > N/y : '`" CONDITIONMPDB;
  fi
  if [ "$CONDITIONMPDB" == "y" ] || [ "$_modprobeddb" == "true" ]; then
    make localmodconfig
  fi

  if [ true = "$_config_fragments" ]; then
    local fragments=()
    mapfile -d '' -t fragments < <(find "$FILESDIR" -type f -name "*.myfrag" -print0)

    if [ true = "$_config_fragments_no_confirm" ]; then
      printf 'Using config fragment %s\n' "${fragments[@]#$FILESDIR/}"
    else
      for i in "${!fragments[@]}"; do
        while true; do
          read -r -p 'Found config fragment '"${fragments[$i]#$FILESDIR/}"', apply it? [y/N] ' CONDITIONMPDB
          CONDITIONMPDB="$(printf '%s' "$CONDITIONMPDB" | tr '[:upper:]' '[:lower:]')"
          case "$CONDITIONMPDB" in
            y|yes)
              break;;
            n|no|'')
              unset fragments[$i]
              break;;
            *)
              echo 'Please answer with yes or no'
          esac
        done
      done
    fi

    if [ 0 -lt "${#fragments[@]}" ]; then
      scripts/kconfig/merge_config.sh -m .config "${fragments[@]}"
    fi
  fi

  make kernelrelease > version
  msg_normal "Prepared %s version %s" "$pkgbase" "$(<version)"

  # menuconfig / nconfig
  if [ -z "$_menunconfig" ]; then
    echo ""
    echo "*Optional* For advanced users - Do you want to use make menuconfig or nconfig"
    echo "to configure the kernel before building it?"
    echo "If you do, make sure your terminal is currently"
    echo "at least 19 lines by 80 columns large or you'll get an error :D"
    read -rp "`echo $'    > 0. nope\n      1. menuconfig\n      2. nconfig\n      choice[0-2?]: '`" CONDITIONMNC;
    _menunconfig="$CONDITIONMNC"
  fi
  if [ 1 = "$_menunconfig" ]; then
    cp .config .config.orig
    make menuconfig
  elif [ 2 = "$_menunconfig" ]; then
    cp .config .config.orig
    make nconfig
  else
    # rewrite configuration
    yes "" | make config >/dev/null
  fi
  if [ 1 = "$_menunconfig" ] || [ 2 = "$_menunconfig" ]; then
    if [ -z "${_diffconfig}" ]; then
      while true; do
        read -r -p 'Generate a config fragment from your changes? [y/N] ' CONDITIONF
        CONDITIONF="$(printf '%s' "$CONDITIONF" | tr '[:upper:]' '[:lower:]')"
        case "$CONDITIONF" in
          y|yes)
            _diffconfig=true
            break;;
          n|no|'')
            _diffconfig=false
            break;;
          *)
            echo 'Please answer with yes or no'
        esac
      done
    fi
    if [ true = "$_diffconfig" ]; then
      if [ -z "$_diffconfig_name" ]; then
        IFS= read -r -p 'Filename for the config fragment [leave empty to not generate fragment]: ' _diffconfig_name
      fi
      if [ -z "$_diffconfig_name" ]; then
        echo 'No file name given, not generating config fragment.'
      else (
        prev_pwd="${PWD:-$(pwd)}"
        cd "$_where"
        "${prev_pwd}/scripts/diffconfig" -m "${prev_pwd}/.config.orig" "${prev_pwd}/.config" > "$_diffconfig_name"
      ) fi
    fi
    rm .config.orig
  fi

  make -s kernelrelease > version
  msg_normal "Prepared %s version %s" "$pkgbase" "$(<version)"
}
