# Template file for 'linux57-tkg-bmq'
# based on PKGBUILD from Tk-Glitch <ti3nou@gmail.com>
pkgname=linux57-tkg-bmq
_sub=5
version=5.7.5 # forced version number
_basever=5.7
revision=8
archs="x86_64" # PKGBUILD declares x86_64 only
wrksrc=linux-${version}
python_version=3
patch_args="-Np1"
hostmakedepends="schedtool xmlto libressl-devel docbook-xsl kmod inetutils bc libelf patchutils flex python-Sphinx python-sphinx_rtd_theme graphviz ImageMagick perl uboot-mkimage cpio gmp-devel libmpc-devel elfutils-devel"
makedepends="xz"
triggers="kernel-hooks"
_kernver="${_basever}.${_sub}-tkg-bmq"
kernel_hooks_version="${_basever}.${_sub}-tkg-bmq"
short_desc="Linux-tkg BMQ CPU Scheduler"
maintainer="Hyper-KVM <hyperkvmx86@gmail.com>"
license="GPL-2.0-only"
homepage="http://www.kernel.org"
distfiles="https://www.kernel.org/pub/linux/kernel/v5.x/linux-${version}.tar.xz"
#https://www.kernel.org/pub/linux/kernel/v5.x/patch-${version}.xz"
checksum="6c37f90354dbe1e29aa144f850b2050259f8a2d180fd24101f9eafc636bb0b01"
#febbb12fde35d754628930805f696d692d5e17fcea34469b96a81072b9dd7179"
nostrip=yes
noshlibprovides=yes
preserve=yes
nodebug=yes

# These files could be modified when an external module is built.
mutable_files="
 /usr/lib/modules/${_kernver}/modules.builtin.bin
 /usr/lib/modules/${_kernver}/modules.builtin.alias.bin
 /usr/lib/modules/${_kernver}/modules.softdep
 /usr/lib/modules/${_kernver}/modules.dep
 /usr/lib/modules/${_kernver}/modules.dep.bin
 /usr/lib/modules/${_kernver}/modules.symbols
 /usr/lib/modules/${_kernver}/modules.symbols.bin
 /usr/lib/modules/${_kernver}/modules.alias
 /usr/lib/modules/${_kernver}/modules.alias.bin
 /usr/lib/modules/${_kernver}/modules.devname"


do_configure() {

echo '       .---.`               `.---.'
echo '    `/syhhhyso-           -osyhhhys/`'
echo '   .syNMdhNNhss/``.---.``/sshNNhdMNys.'
echo '   +sdMh.`+MNsssssssssssssssNM+`.hMds+'
echo '   :syNNdhNNhssssssssssssssshNNhdNNys:'
echo '    /ssyhhhysssssssssssssssssyhhhyss/'
echo '    .ossssssssssssssssssssssssssssso.'
echo '   :sssssssssssssssssssssssssssssssss:'
echo '  /sssssssssssssssssssssssssssssssssss/'
echo ' :sssssssssssssoosssssssoosssssssssssss:'
echo ' osssssssssssssoosssssssoossssssssssssso'
echo ' osssssssssssyyyyhhhhhhhyyyyssssssssssso'
echo ' /yyyyyyhhdmmmmNNNNNNNNNNNmmmmdhhyyyyyy/'
echo '  smmmNNNNNNNNNNNNNNNNNNNNNNNNNNNNNmmms'
echo '   /dNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNd/'
echo '    `:sdNNNNNNNNNNNNNNNNNNNNNNNNNds:`'
echo '       `-+shdNNNNNNNNNNNNNNNdhs+-`'
echo '             `.-:///////:-.`'


source "${FILESDIR}"/customization.cfg # load default configuration from file

# Load external configuration file if present. Available variable values will overwrite customization.cfg ones.
if [ -e "$_EXT_CONFIG_PATH" ]; then
	source "$_EXT_CONFIG_PATH" && echo "External configuration file $_EXT_CONFIG_PATH will be used to override customization.cfg values." && echo ""
fi

if [ -z "$_OPTIPROFILE" ] && [ ! -e "$FILESDIR"/cpuschedset ]; then
	# Prompt about optimized configurations. Available variable values will overwrite customization.cfg/external config ones.
  	echo "Do you want to use a predefined optimized profile?"
  	read -rp "`echo $'  > 1.Custom\n    2.Ryzen Desktop (Performance)\n    3.Other Desktop (Performance)\nchoice[1-3?]: '`" _OPTIPROFILE;
fi
if [ "$_OPTIPROFILE" == "2" ]; then
  source "$FILESDIR"/ryzen-desktop-profile.cfg && echo "Ryzen Desktop (Performance) profile will be used." && echo ""
elif [ "$_OPTIPROFILE" == "3" ]; then
  source "$FILESDIR"/generic-desktop-profile.cfg && echo "Generic Desktop (Performance) profile will be used." && echo ""
fi

_cpusched=bmq

pkgbase=linux"${_basever}"-tkg-"${_cpusched}"


export KBUILD_BUILD_HOST=voidlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

  ln -sf "${FILESDIR}/customization.cfg" "${wrksrc}" # workaround

# add upstream patch
#patch -Np1 < ${XBPS_BUILDDIR}/patch-"${version}"


  # ARCH Patches
  if [ "${_configfile}" == "config_hardened.x86_64" ] && [ "${_cpusched}" == "cfs" ]; then
    echo "Using linux hardened patchset"
    patch -Np1 < ${FILESDIR}/linux57-tkg-bmq-patches/0012-linux-hardened.patch
  else
    patch -Np1 < ${FILESDIR}/linux57-tkg-bmq-patches/0001-add-sysctl-to-disallow-unprivileged-CLONE_NEWUSER-by.patch
  fi

  # TkG
  patch -Np1 < ${FILESDIR}/linux57-tkg-bmq-patches/0002-clear-patches.patch

  patch -Np1 < ${FILESDIR}/linux57-tkg-bmq-patches/0003-glitched-base.patch

  if [ "${_tp_smapi_ec}" != "false" ]; then
    patch -Np1 < ${FILESDIR}/linux57-tkg-bmq-patches/0013-tp_smapi_ec.patch
  fi

    # BMQ
    patch -Np1 < ${FILESDIR}/linux57-tkg-bmq-patches/0009-bmq_v5.7-r0.patch
    if [ "${_aggressive_ondemand}" == "true" ]; then
      patch -Np1 < ${FILESDIR}/linux57-tkg-bmq-patches/0009-glitched-ondemand-bmq.patch
    fi
    patch -Np1 < ${FILESDIR}/linux57-tkg-bmq-patches/0009-glitched-bmq.patch

  if [ -z "${_configfile}" ]; then
    _configfile="config.x86_64"
  fi

  cat "${FILESDIR}/linux57-tkg-bmq-config/${_configfile}" > ${wrksrc}/.config

  # Set some -tkg defaults
  echo "# CONFIG_DYNAMIC_FAULT is not set" >> ${wrksrc}/.config
  sed -i -e 's/CONFIG_DEFAULT_FQ_CODEL=y/# CONFIG_DEFAULT_FQ_CODEL is not set/' ${wrksrc}/.config
  echo "CONFIG_DEFAULT_CAKE=y" >> ${wrksrc}/.config
  echo "CONFIG_NR_TTY_DEVICES=63" >> ${wrksrc}/.config
  echo "CONFIG_TP_SMAPI=m" >> ${wrksrc}/.config
  echo "CONFIG_RAID6_USE_PREFER_GEN=y" >> ${wrksrc}/.config
  echo "# CONFIG_NTP_PPS is not set" >> ${wrksrc}/.config
  sed -i -e 's/CONFIG_CRYPTO_LZ4=m/CONFIG_CRYPTO_LZ4=y/' ${wrksrc}/.config
  sed -i -e 's/CONFIG_CRYPTO_LZ4HC=m/CONFIG_CRYPTO_LZ4HC=y/' ${wrksrc}/.config
  sed -i -e 's/CONFIG_LZ4_COMPRESS=m/CONFIG_LZ4_COMPRESS=y/' ${wrksrc}/.config
  sed -i -e 's/CONFIG_LZ4HC_COMPRESS=m/CONFIG_LZ4HC_COMPRESS=y/' ${wrksrc}/.config
  #sed -i -e 's/CONFIG_RCU_BOOST_DELAY=500/CONFIG_RCU_BOOST_DELAY=0/' ${wrksrc}/.config
  sed -i -e 's/# CONFIG_CMDLINE_BOOL is not set/CONFIG_CMDLINE_BOOL=y/' ${wrksrc}/.config
  echo "CONFIG_CMDLINE=\"${_custom_commandline}\"" >> ${wrksrc}/.config
  echo "# CONFIG_CMDLINE_OVERRIDE is not set" >> ${wrksrc}/.config
  if [ "$_noccache" != "true" ] && pacman -Qq ccache &> /dev/null; then
    sed -i -e 's/CONFIG_GCC_PLUGINS=y/# CONFIG_GCC_PLUGINS is not set/' ${wrksrc}/.config
  fi

  if [ "$_font_autoselect" != "false" ]; then
    sed -i -e 's/CONFIG_FONT_TER16x32=y/# CONFIG_FONT_TER16x32 is not set\nCONFIG_FONT_AUTOSELECT=y/' ${wrksrc}/.config
  fi

  # Inject cpuopts options
  echo "# CONFIG_MK8SSE3 is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MK10 is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MBARCELONA is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MBOBCAT is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MJAGUAR is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MBULLDOZER is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MPILEDRIVER is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MSTEAMROLLER is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MEXCAVATOR is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MZEN is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MZEN2 is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MATOM is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MNEHALEM is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MWESTMERE is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MSILVERMONT is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MSANDYBRIDGE is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MIVYBRIDGE is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MHASWELL is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MBROADWELL is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MSKYLAKE is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MSKYLAKEX is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MCANNONLAKE is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MICELAKE is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MGOLDMONT is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MGOLDMONTPLUS is not set" >> ${wrksrc}/.config
  echo "# CONFIG_MCASCADELAKE is not set" >> ${wrksrc}/.config

  # Disable some debugging
  if [ "${_debugdisable}" == "true" ]; then
    sed -i -e 's/CONFIG_SLUB_DEBUG=y/# CONFIG_SLUB_DEBUG is not set/' ${wrksrc}/.config
    sed -i -e 's/CONFIG_PM_DEBUG=y/# CONFIG_PM_DEBUG is not set/' ${wrksrc}/.config
    sed -i -e 's/CONFIG_PM_ADVANCED_DEBUG=y/# CONFIG_PM_ADVANCED_DEBUG is not set/' ${wrksrc}/.config
    sed -i -e 's/CONFIG_PM_SLEEP_DEBUG=y/# CONFIG_PM_SLEEP_DEBUG is not set/' ${wrksrc}/.config
    sed -i -e 's/CONFIG_ACPI_DEBUG=y/# CONFIG_ACPI_DEBUG is not set/' ${wrksrc}/.config
    sed -i -e 's/CONFIG_SCHED_DEBUG=y/# CONFIG_SCHED_DEBUG is not set/' ${wrksrc}/.config
    sed -i -e 's/CONFIG_DEBUG_PREEMPT=y/# CONFIG_DEBUG_PREEMPT is not set/' ${wrksrc}/.config
  fi

    # BMQ default config
    echo "CONFIG_SCHED_BMQ=y" >> ${wrksrc}/.config

    # Disable CFS
    sed -i -e 's/CONFIG_FAIR_GROUP_SCHED=y/# CONFIG_FAIR_GROUP_SCHED is not set/' ${wrksrc}/.config
    sed -i -e 's/CONFIG_CFS_BANDWIDTH=y/# CONFIG_CFS_BANDWIDTH is not set/' ${wrksrc}/.config
    # sched yield type
    if [ -n "$_sched_yield_type" ]; then
      CONDITION0="$_sched_yield_type"
    else
      echo ""
      echo "CPU sched_yield_type - Choose what sort of yield sched_yield will perform."
      echo ""
      echo "For PDS and MuQSS:"
      echo "0: No yield."
      echo "1: Yield only to better priority/deadline tasks."
      echo "2: Expire timeslice and recalculate deadline."
      echo ""
      echo "For BMQ (experimental) - No recommended value yet, so try for yourself x) :"
      echo "0: No yield."
      echo "1: Deboost and requeue task. (default)"
      echo "2: Set rq skip task."
      read -rp "`echo $'\n    > 0. Recommended option for gaming on PDS and MuQSS - "tkg" default\n      1. Default, but can lead to stability issues on some platforms\n      2. Can be a good option with low rr_interval on MuQSS\n    [0-2?]: '`" CONDITION0;
    fi
    if [ "$CONDITION0" == "1" ]; then
      echo "Using default CPU sched yield type (1)"
    elif [ "$CONDITION0" == "2" ]; then
      sed -i -e 's/int sched_yield_type __read_mostly = 1;/int sched_yield_type __read_mostly = 2;/' ${wrksrc}/kernel/sched/"${_cpusched}".c
    else
      sed -i -e 's/int sched_yield_type __read_mostly = 1;/int sched_yield_type __read_mostly = 0;/' ${wrksrc}/kernel/sched/"${_cpusched}".c
    fi

  # Round Robin interval
  if [ "${_cpusched}" == "MuQSS" ] || [ "${_cpusched}" == "pds" ] || [ "${_cpusched}" == "bmq" ]; then
    if [ -n "$_rr_interval" ]; then
      CONDITION1="$_rr_interval"
    else
      echo ""
      echo "Round Robin interval is the longest duration two tasks with the same nice level will"
      echo "be delayed for. When CPU time is requested by a task, it receives a time slice equal"
      echo "to the rr_interval in addition to a virtual deadline. When using yield_type 2, a low"
      echo "value can help offset the disadvantages of rescheduling a process that has yielded."
      echo ""
      echo "MuQSS default: 6ms"
      echo "PDS default: 4ms"
      echo "BMQ default: 2ms"
      read -rp "`echo $'\n    > 0.Keep defaults\n      1.2ms\n      2.4ms\n      3.6ms\n      4.8ms\n    [0-4?]: '`" CONDITION1;
    fi
    if [ "$CONDITION1" == "1" ]; then
      echo "Using 2ms rr_interval"
      _rrvalue="2"
    elif [ "$CONDITION1" == "2" ]; then
      echo "Using 4ms rr_interval"
      _rrvalue="4"
    elif [ "$CONDITION1" == "3" ]; then
      echo "Using 6ms rr_interval"
      _rrvalue="6"
    elif [ "$CONDITION1" == "4" ]; then
      echo "Using 8ms rr_interval"
      _rrvalue="8"
    else
      echo "Using default rr_interval"
      _rrvalue="default"
    fi
    if [ "$_rrvalue" != "default" ]; then
        sed -i -e "s/u64 sched_timeslice_ns __read_mostly = (4 * 1000 * 1000);/u64 sched_timeslice_ns __read_mostly = (${_rrvalue} * 1000 * 1000);/" ${wrksrc}/kernel/sched/"${_cpusched}".c
    else
        sed -i -e "s/u64 sched_timeslice_ns __read_mostly = (4 * 1000 * 1000);/u64 sched_timeslice_ns __read_mostly = (2 * 1000 * 1000);/" ${wrksrc}/kernel/sched/"${_cpusched}".c
    fi
  fi

  # zenify
  if [ "$_zenify" == "true" ]; then
    echo "CONFIG_ZENIFY=y" >> ${wrksrc}/.config
  elif [ "$_zenify" == "false" ]; then
    echo "# CONFIG_ZENIFY is not set" >> ${wrksrc}/.config
  fi

  # compiler optimization level
  if [ "$_compileroptlevel" == "1" ]; then
    echo "# CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3 is not set" >> ${wrksrc}/.config
  elif [ "$_compileroptlevel" == "2" ]; then
    sed -i -e 's/CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y/# CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE is not set/' ${wrksrc}/.config
    echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=y" >> ${wrksrc}/.config
  elif [ "$_compileroptlevel" == "3" ]; then
    sed -i -e 's/CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y/# CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE is not set/' ${wrksrc}/.config
    sed -i -e 's/# CONFIG_CC_OPTIMIZE_FOR_SIZE is not set/CONFIG_CC_OPTIMIZE_FOR_SIZE=y/' ${wrksrc}/.config
    echo "# CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3 is not set" >> ${wrksrc}/.config
  fi

  # cpu opt
  if [ -n "$_processor_opt" ] && [ "$_processor_opt" != "native" ]; then
    echo "# CONFIG_MNATIVE is not set" >> ${wrksrc}/.config
  fi

  if [ -n "$_processor_opt" ] && [ "$_processor_opt" != "generic" ]; then
    sed -i -e 's/CONFIG_GENERIC_CPU=y/# CONFIG_GENERIC_CPU is not set/' ${wrksrc}/.config
  fi

  if [ "$_processor_opt" == "native" ]; then
    echo "CONFIG_MNATIVE=y" >> ${wrksrc}/.config
  elif [ "$_processor_opt" == "k8" ]; then
    sed -i -e 's/# CONFIG_MK8 is not set/CONFIG_MK8=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "k8sse3" ]; then
    sed -i -e 's/# CONFIG_MK8SSE3 is not set/CONFIG_MK8SSE3=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "k10" ]; then
    sed -i -e 's/# CONFIG_MK10 is not set/CONFIG_MK10=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "barcelona" ]; then
    sed -i -e 's/# CONFIG_MBARCELONA is not set/CONFIG_MBARCELONA=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "bobcat" ]; then
    sed -i -e 's/# CONFIG_MBOBCAT is not set/CONFIG_MBOBCAT=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "jaguar" ]; then
    sed -i -e 's/# CONFIG_MJAGUAR is not set/CONFIG_MJAGUAR=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "bulldozer" ]; then
    sed -i -e 's/# CONFIG_MBULLDOZER is not set/CONFIG_MBULLDOZER=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "piledriver" ]; then
    sed -i -e 's/# CONFIG_MPILEDRIVER is not set/CONFIG_MPILEDRIVER=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "steamroller" ]; then
    sed -i -e 's/# CONFIG_MSTEAMROLLER is not set/CONFIG_MSTEAMROLLER=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "excavator" ]; then
    sed -i -e 's/# CONFIG_MEXCAVATOR is not set/CONFIG_MEXCAVATOR=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "zen" ]; then
    sed -i -e 's/# CONFIG_MZEN is not set/CONFIG_MZEN=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "zen2" ]; then
    sed -i -e 's/# CONFIG_MZEN2 is not set/CONFIG_MZEN2=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "mpsc" ]; then
    sed -i -e 's/# CONFIG_MPSC is not set/CONFIG_MPSC=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "atom" ]; then
    sed -i -e 's/# CONFIG_MATOM is not set/CONFIG_MATOM=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "core2" ]; then
    sed -i -e 's/# CONFIG_MCORE2 is not set/CONFIG_MCORE2=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "nehalem" ]; then
    sed -i -e 's/# CONFIG_MNEHALEM is not set/CONFIG_MNEHALEM=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "westmere" ]; then
    sed -i -e 's/# CONFIG_MWESTMERE is not set/CONFIG_MWESTMERE=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "silvermont" ]; then
    sed -i -e 's/# CONFIG_MSILVERMONT is not set/CONFIG_MSILVERMONT=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "sandybridge" ]; then
    sed -i -e 's/# CONFIG_MSANDYBRIDGE is not set/CONFIG_MSANDYBRIDGE=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "ivybridge" ]; then
    sed -i -e 's/# CONFIG_MIVYBRIDGE is not set/CONFIG_MIVYBRIDGE=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "haswell" ]; then
    sed -i -e 's/# CONFIG_MHASWELL is not set/CONFIG_MHASWELL=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "broadwell" ]; then
    sed -i -e 's/# CONFIG_MBROADWELL is not set/CONFIG_MBROADWELL=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "skylake" ]; then
    sed -i -e 's/# CONFIG_MSKYLAKE is not set/CONFIG_MSKYLAKE=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "skylakex" ]; then
    sed -i -e 's/# CONFIG_MSKYLAKEX is not set/CONFIG_MSKYLAKEX=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "cannonlake" ]; then
    sed -i -e 's/# CONFIG_MCANNONLAKE is not set/CONFIG_MCANNONLAKE=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "icelake" ]; then
    sed -i -e 's/# CONFIG_MICELAKE is not set/CONFIG_MICELAKE=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "goldmont" ]; then
    sed -i -e 's/# CONFIG_MGOLDMONT is not set/CONFIG_MGOLDMONT=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "goldmontplus" ]; then
    sed -i -e 's/# CONFIG_MGOLDMONTPLUS is not set/CONFIG_MGOLDMONTPLUS=y/' ${wrksrc}/.config
  elif [ "$_processor_opt" == "cascadelake" ]; then
    sed -i -e 's/# CONFIG_MCASCADELAKE is not set/CONFIG_MCASCADELAKE=y/' ${wrksrc}/.config
  fi

  # irq threading
  if [ "$_irq_threading" == "true" ]; then
    echo "CONFIG_FORCE_IRQ_THREADING=y" >> ${wrksrc}/.config
  elif [ "$_irq_threading" == "false" ]; then
    echo "# CONFIG_FORCE_IRQ_THREADING is not set" >> ${wrksrc}/.config
  fi

  # smt nice
  if [ "$_smt_nice" == "true" ]; then
    echo "CONFIG_SMT_NICE=y" >> ${wrksrc}/.config
  elif [ "$_smt_nice" == "false" ]; then
    echo "# CONFIG_SMT_NICE is not set" >> ${wrksrc}/.config
  fi

  # random trust cpu
  if [ "$_random_trust_cpu" == "true" ]; then
    sed -i -e 's/# CONFIG_RANDOM_TRUST_CPU is not set/CONFIG_RANDOM_TRUST_CPU=y/' ${wrksrc}/.config
  fi

  # rq sharing
  if [ "$_runqueue_sharing" == "none" ]; then
    echo -e "CONFIG_RQ_NONE=y\n# CONFIG_RQ_SMT is not set\n# CONFIG_RQ_MC is not set\n# CONFIG_RQ_MC_LLC is not set\n# CONFIG_RQ_SMP is not set\n# CONFIG_RQ_ALL is not set" >> ${wrksrc}/.config
  elif [ -z "$_runqueue_sharing" ] || [ "$_runqueue_sharing" == "smt" ]; then
    echo -e "# CONFIG_RQ_NONE is not set\nCONFIG_RQ_SMT=y\n# CONFIG_RQ_MC is not set\n# CONFIG_RQ_MC_LLC is not set\n# CONFIG_RQ_SMP is not set\n# CONFIG_RQ_ALL is not set" >> ${wrksrc}/.config
  elif [ "$_runqueue_sharing" == "mc" ]; then
    echo -e "# CONFIG_RQ_NONE is not set\n# CONFIG_RQ_SMT is not set\nCONFIG_RQ_MC=y\n# CONFIG_RQ_MC_LLC is not set\n# CONFIG_RQ_SMP is not set\n# CONFIG_RQ_ALL is not set" >> ${wrksrc}/.config
  elif [ "$_runqueue_sharing" == "smp" ]; then
    echo -e "# CONFIG_RQ_NONE is not set\n# CONFIG_RQ_SMT is not set\n# CONFIG_RQ_MC is not set\n# CONFIG_RQ_MC_LLC is not set\nCONFIG_RQ_SMP=y\n# CONFIG_RQ_ALL is not set" >> ${wrksrc}/.config
  elif [ "$_runqueue_sharing" == "all" ]; then
    echo -e "# CONFIG_RQ_NONE is not set\n# CONFIG_RQ_SMT is not set\n# CONFIG_RQ_MC is not set\n# CONFIG_RQ_MC_LLC is not set\n# CONFIG_RQ_SMP is not set\nCONFIG_RQ_ALL=y" >> ${wrksrc}/.config
  elif [ "$_runqueue_sharing" == "mc-llc" ]; then
    echo -e "# CONFIG_RQ_NONE is not set\n# CONFIG_RQ_SMT is not set\n# CONFIG_RQ_MC is not set\nCONFIG_RQ_MC_LLC=y\n# CONFIG_RQ_SMP is not set\n# CONFIG_RQ_ALL is not set" >> ${wrksrc}/.config
  fi

  # timer freq
  if [ -n "$_timer_freq" ] && [ "$_timer_freq" != "300" ]; then
    sed -i -e 's/CONFIG_HZ_300=y/# CONFIG_HZ_300 is not set/' ${wrksrc}/.config
    sed -i -e 's/CONFIG_HZ_300_NODEF=y/# CONFIG_HZ_300_NODEF is not set/' ${wrksrc}/.config
    if [ "$_timer_freq" == "1000" ]; then
      sed -i -e 's/# CONFIG_HZ_1000 is not set/CONFIG_HZ_1000=y/' ${wrksrc}/.config
      sed -i -e 's/CONFIG_HZ=300/CONFIG_HZ=1000/' ${wrksrc}/.config
      echo "# CONFIG_HZ_500 is not set" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_500_NODEF is not set" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_750 is not set" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_750_NODEF is not set" >> ${wrksrc}/.config
      echo "CONFIG_HZ_1000_NODEF=y" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_250_NODEF is not set" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_300_NODEF is not set" >> ${wrksrc}/.config
    elif [ "$_timer_freq" == "750" ]; then
      sed -i -e 's/CONFIG_HZ=300/CONFIG_HZ=750/' ${wrksrc}/.config
      echo "# CONFIG_HZ_500 is not set" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_500_NODEF is not set" >> ${wrksrc}/.config
      echo "CONFIG_HZ_750=y" >> ${wrksrc}/.config
      echo "CONFIG_HZ_750_NODEF=y" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_1000_NODEF is not set" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_250_NODEF is not set" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_300_NODEF is not set" >> ${wrksrc}/.config
    elif [ "$_timer_freq" == "500" ]; then
      sed -i -e 's/CONFIG_HZ=300/CONFIG_HZ=500/' ${wrksrc}/.config
      echo "CONFIG_HZ_500=y" >> ${wrksrc}/.config
      echo "CONFIG_HZ_500_NODEF=y" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_750 is not set" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_750_NODEF is not set" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_1000_NODEF is not set" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_250_NODEF is not set" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_300_NODEF is not set" >> ${wrksrc}/.config
    elif [ "$_timer_freq" == "100" ]; then
      sed -i -e 's/CONFIG_HZ=300/CONFIG_HZ=100/' ${wrksrc}/.config
      echo "# CONFIG_HZ_500 is not set" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_750 is not set" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_1000_NODEF is not set" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_750_NODEF is not set" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_500_NODEF is not set" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_250_NODEF is not set" >> ${wrksrc}/.config
      echo "# CONFIG_HZ_300_NODEF is not set" >> ${wrksrc}/.config
      echo "CONFIG_HZ_100=y" >> ${wrksrc}/.config
      echo "CONFIG_HZ_100_NODEF=y" >> ${wrksrc}/.config
    fi
  else
    sed -i -e 's/CONFIG_HZ_300=y/# CONFIG_HZ_300 is not set/' ${wrksrc}/.config
    sed -i -e 's/CONFIG_HZ_300_NODEF=y/# CONFIG_HZ_300_NODEF is not set/' ${wrksrc}/.config
    sed -i -e 's/CONFIG_HZ=300/CONFIG_HZ=500/' ${wrksrc}/.config
    echo "CONFIG_HZ_500=y" >> ${wrksrc}/.config
    echo "CONFIG_HZ_500_NODEF=y" >> ${wrksrc}/.config
    echo "# CONFIG_HZ_250_NODEF is not set" >> ${wrksrc}/.config
    echo "# CONFIG_HZ_300_NODEF is not set" >> ${wrksrc}/.config
  fi

  # default cpu gov
  if [ "$_default_cpu_gov" == "performance" ]; then
    sed -i -e 's/CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL=y/# CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL is not set/' ${wrksrc}/.config
    sed -i -e 's/# CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE is not set/CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE=y/' ${wrksrc}/.config
  elif [ "$_default_cpu_gov" == "ondemand" ]; then
    sed -i -e 's/CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL=y/# CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL is not set/' ${wrksrc}/.config
    sed -i -e 's/# CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND is not set/CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND=y/' ${wrksrc}/.config
  fi

  # ACPI_CPUFREQ disablement
  if [ "$_disable_acpi_cpufreq" == "true" ]; then
    sed -i -e 's/CONFIG_X86_ACPI_CPUFREQ=m/# CONFIG_X86_ACPI_CPUFREQ is not set/' ${wrksrc}/.config
  fi

  # ftrace
  if [ -z "$_ftracedisable" ]; then
    echo ""
    echo "Disable FUNCTION_TRACER/GRAPH_TRACER? Lowers overhead but limits debugging"
    echo "and analyzing of kernel functions."
    read -rp "`echo $'    > N/y : '`" CONDITION2;
  fi
  if [ "$CONDITION2" == "y" ] || [ "$_ftracedisable" == "true" ]; then
    sed -i -e 's/CONFIG_FUNCTION_TRACER=y/# CONFIG_FUNCTION_TRACER is not set/' ${wrksrc}/.config
    sed -i -e 's/CONFIG_FUNCTION_GRAPH_TRACER=y/# CONFIG_FUNCTION_GRAPH_TRACER is not set/' ${wrksrc}/.config
  fi

  # disable numa
  if [ -z "$_numadisable" ]; then
    echo ""
    echo "Disable NUMA? Lowers overhead, but breaks CUDA/NvEnc on Nvidia if disabled."
    echo "https://bbs.archlinux.org/viewtopic.php?id=239174"
    read -rp "`echo $'    > N/y : '`" CONDITION3;
  fi
  if [ "$CONDITION3" == "y" ] || [ "$_numadisable" == "true" ]; then
    # disable NUMA since 99.9% of users do not have multiple CPUs but do have multiple cores in one CPU
    sed -i -e 's/CONFIG_NUMA=y/# CONFIG_NUMA is not set/' \
        -i -e '/CONFIG_AMD_NUMA=y/d' \
        -i -e '/CONFIG_X86_64_ACPI_NUMA=y/d' \
        -i -e '/CONFIG_NODES_SPAN_OTHER_NODES=y/d' \
        -i -e '/# CONFIG_NUMA_EMU is not set/d' \
        -i -e '/CONFIG_NODES_SHIFT=6/d' \
        -i -e '/CONFIG_NEED_MULTIPLE_NODES=y/d' \
        -i -e '/CONFIG_USE_PERCPU_NUMA_NODE_ID=y/d' \
        -i -e '/CONFIG_ACPI_NUMA=y/d' ${wrksrc}/.config
  fi

  # tickless
  if [ -z "$_tickless" ]; then
    echo ""
    echo "Use CattaRappa mode (Tickless/Dynticks) ?"
    echo "Can give higher performances in many cases but lower consistency on some hardware."
    echo "Just tickless idle can perform better with some platforms (mostly AMD) or CPU schedulers (mostly MuQSS)."
    if [ "${_cpusched}" == "MuQSS" ]; then
      read -rp "`echo $'\n      0.No, use periodic ticks\n      1.Yes, full tickless baby!\n    > 2.Just tickless idle plz\n    [0-2?]: '`" CONDITION4;
    else
      read -rp "`echo $'\n      0.No, use periodic ticks\n    > 1.Yes, full tickless baby!\n      2.Just tickless idle plz\n    [0-2?]: '`" CONDITION4;
    fi
  fi
  if [ "$CONDITION4" == "0" ] || [ "$_tickless" == "0" ]; then
    echo "# CONFIG_NO_HZ_FULL_NODEF is not set" >> ${wrksrc}/.config
    sed -i -e 's/# CONFIG_HZ_PERIODIC is not set/CONFIG_HZ_PERIODIC=y/' ${wrksrc}/.config
    sed -i -e 's/CONFIG_NO_HZ_IDLE=y/# CONFIG_NO_HZ_IDLE is not set/' ${wrksrc}/.config
    sed -i -e 's/CONFIG_NO_HZ_FULL=y/# CONFIG_NO_HZ_FULL is not set/' ${wrksrc}/.config
    sed -i -e 's/CONFIG_NO_HZ=y/# CONFIG_NO_HZ is not set/' ${wrksrc}/.config
    sed -i -e 's/CONFIG_NO_HZ_COMMON=y/# CONFIG_NO_HZ_COMMON is not set/' ${wrksrc}/.config
  elif [ "$CONDITION4" == "2" ] || [ "$_tickless" == "2" ]; then
    echo "# CONFIG_NO_HZ_FULL_NODEF is not set" >> ${wrksrc}/.config
    sed -i -e 's/CONFIG_HZ_PERIODIC=y/# CONFIG_HZ_PERIODIC is not set/' ${wrksrc}/.config
    sed -i -e 's/# CONFIG_NO_HZ_IDLE is not set/CONFIG_NO_HZ_IDLE=y/' ${wrksrc}/.config
    sed -i -e 's/CONFIG_NO_HZ_FULL=y/# CONFIG_NO_HZ_FULL is not set/' ${wrksrc}/.config
    sed -i -e 's/# CONFIG_NO_HZ is not set/CONFIG_NO_HZ=y/' ${wrksrc}/.config
    sed -i -e 's/# CONFIG_NO_HZ_COMMON is not set/CONFIG_NO_HZ_COMMON=y/' ${wrksrc}/.config
  else
    echo "CONFIG_NO_HZ_FULL_NODEF=y" >> ${wrksrc}/.config
    sed -i -e 's/CONFIG_HZ_PERIODIC=y/# CONFIG_HZ_PERIODIC is not set/' ${wrksrc}/.config
    sed -i -e 's/CONFIG_NO_HZ_IDLE=y/# CONFIG_NO_HZ_IDLE is not set/' ${wrksrc}/.config
    sed -i -e 's/# CONFIG_NO_HZ_FULL is not set/CONFIG_NO_HZ_FULL=y/' ${wrksrc}/.config
    sed -i -e 's/# CONFIG_NO_HZ is not set/CONFIG_NO_HZ=y/' ${wrksrc}/.config
    sed -i -e 's/# CONFIG_NO_HZ_COMMON is not set/CONFIG_NO_HZ_COMMON=y/' ${wrksrc}/.config
    echo "CONFIG_CONTEXT_TRACKING=y" >> ${wrksrc}/.config
    echo "# CONFIG_CONTEXT_TRACKING_FORCE is not set" >> ${wrksrc}/.config
  fi

  # voluntary preempt
  if [ -z "$_voluntary_preempt" ]; then
    echo ""
    echo "Use explicit preemption points?"
    echo "It can improve latency on PDS (at the cost of throughput)"
    echo "and improve throughput on other schedulers (at the cost of latency)"
    read -rp "`echo $'    > N/y : '`" CONDITION5;
  fi
  if [ "$CONDITION5" == "y" ] || [ "$_voluntary_preempt" == "true" ]; then
    sed -i -e 's/CONFIG_PREEMPT=y/# CONFIG_PREEMPT is not set/' ${wrksrc}/.config
    sed -i -e 's/CONFIG_PREEMPT_LL=y/# CONFIG_PREEMPT_LL is not set/' ${wrksrc}/.config
    sed -i -e 's/# CONFIG_PREEMPT_VOLUNTARY is not set/CONFIG_PREEMPT_VOLUNTARY=y/' ${wrksrc}/.config
  fi

  # Open Firmware support
  if [ -z "$_OFenable" ]; then
    echo ""
    echo "Enable Device Tree and Open Firmware support?"
    read -rp "`echo $'    > N/y : '`" CONDITION6;
  fi
  if [ "$CONDITION6" == "y" ] || [ "$_OFenable" == "true" ]; then
    sed -i -e 's/# CONFIG_OF is not set/CONFIG_OF=y/' ${wrksrc}/.config
  fi

  # acs override
  if [ -z "$_acs_override" ]; then
    echo ""
    echo "Use ACS override patch?"
    echo "https://wiki.archlinux.org/index.php/PCI_passthrough_via_OVMF#Bypassing_the_IOMMU_groups_.28ACS_override_patch.29"
    read -rp "`echo $'    > N/y : '`" CONDITION7;
  fi
  if [ "$CONDITION7" == "y" ] || [ "$_acs_override" == "true" ]; then
    patch -Np1 -i ${FILESDIR}/linux57-tkg-bmq-patches/0006-add-acs-overrides_iommu.patch
  fi

  # bcachefs
#  if [ -z "$_bcachefs" ]; then
#     echo ""
#     echo "Add Bcache filesystem support? You'll have to install bcachefs-tools for utilities."
#     echo "https://bcachefs.org/"
#     read -rp "`echo $'    > N/y : '`" CONDITION8;
#   fi
#   if [ "$CONDITION8" == "y" ] || [ "$_bcachefs" == "true" ]; then
#     patch -Np1 -i .${wrksrc}/0008-5.6-bcachefs.patch
#     echo "CONFIG_BCACHEFS_FS=m" >> ${wrksrc}/.config
#     echo "CONFIG_BCACHEFS_QUOTA=y" >> ${wrksrc}/.config
#     echo "CONFIG_BCACHEFS_POSIX_ACL=y" >> ${wrksrc}/.config
#     echo "# CONFIG_BCACHEFS_DEBUG is not set" >> ${wrksrc}/.config
#     echo "# CONFIG_BCACHEFS_TESTS is not set" >> ${wrksrc}/.config
#     echo "# CONFIG_DEBUG_CLOSURES is not set" >> ${wrksrc}/.config
#   fi

  # fsync support
  if [ -z "$_fsync" ]; then
    echo ""
    echo "Enable support for fsync, an experimental replacement for esync in Valve Proton 4.11+"
    echo "https://steamcommunity.com/games/221410/announcements/detail/2957094910196249305"
    read -rp "`echo $'    > N/y : '`" CONDITION9;
  fi
  if [ "$CONDITION9" == "y" ] || [ "$_fsync" == "true" ]; then
    patch -Np1 < ${FILESDIR}/linux57-tkg-bmq-patches/0007-v5.7-fsync.patch
  fi

  # ZFS fix
  if [ -z "$_zfsfix" ]; then
    echo ""
    echo "Add back missing symbol for AES-NI/AVX support on ZFS"
    echo "https://github.com/NixOS/nixpkgs/blob/master/pkgs/os-specific/linux/kernel/export_kernel_fpu_functions_5_3.patch"
    read -rp "`echo $'    > N/y : '`" CONDITION11;
  fi
  if [ "$CONDITION11" == "y" ] || [ "$_zfsfix" == "true" ]; then
    patch -Np1 < ${FILESDIR}/linux57-tkg-bmq-patches/0011-ZFS-fix.patch
  fi

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh

  # get kernel version
  make prepare

  # localmodconfig
  if [ -z "$_modprobeddb" ]; then
    echo ""
    echo "Use localmodconfig to clean config from unneeded modules?"
    echo "Speeds up compilation considerably by only using loaded modules."
    read -rp "`echo $'    > N/y : '`" CONDITIONMPDB;
  fi
  if [ "$CONDITIONMPDB" == "y" ] || [ "$_modprobeddb" == "true" ]; then
    make localmodconfig
  fi

  if [ true = "$_config_fragments" ]; then
    local fragments=()
    mapfile -d '' -t fragments < <(find "$FILESDIR" -type f -name "*.myfrag" -print0)

    if [ true = "$_config_fragments_no_confirm" ]; then
      printf 'Using config fragment %s\n' "${fragments[@]#$FILESDIR/}"
    else
      for i in "${!fragments[@]}"; do
        while true; do
          read -r -p 'Found config fragment '"${fragments[$i]#$FILESDIR/}"', apply it? [y/N] ' CONDITIONMPDB
          CONDITIONMPDB="$(printf '%s' "$CONDITIONMPDB" | tr '[:upper:]' '[:lower:]')"
          case "$CONDITIONMPDB" in
            y|yes)
              break;;
            n|no|'')
              unset fragments[$i]
              break;;
            *)
              echo 'Please answer with yes or no'
          esac
        done
      done
    fi

    if [ 0 -lt "${#fragments[@]}" ]; then
      scripts/kconfig/merge_config.sh -m .config "${fragments[@]}"
    fi
  fi

  make kernelrelease > version
  msg_normal "Prepared %s version %s" "$pkgbase" "$(<version)"
}

do_build() {

  _cpusched=bmq

  # Use custom compiler paths if defined
  if [ -n "${CUSTOM_GCC_PATH}" ]; then
    PATH=${CUSTOM_GCC_PATH}/bin:${CUSTOM_GCC_PATH}/lib:${CUSTOM_GCC_PATH}/include:${PATH}
  fi

  if [ "$_force_all_threads" == "true" ]; then
    _force_all_threads="-j$((`nproc`*2))"
  else
    _force_all_threads="${makejobs}"
  fi

  # ccache
  if [ "$_noccache" != "true" ] && xbps-query -s ccache &> /dev/null; then
    export PATH="/usr/lib/ccache/bin/:$PATH"
    export CCACHE_SLOPPINESS="file_macro,locale,time_macros"
    export CCACHE_NOHASHDIR="true"
    echo 'ccache was found and will be used'
  fi

  # build!
  _runtime=$( time ( schedtool -B -n 1 -e ionice -n 1 make ${_force_all_threads} LOCALVERSION=-tkg-${_cpusched} bzImage modules 2>&1 ) 3>&1 1>&2 2>&3 ) || _runtime=$( time ( make ${_force_all_threads} LOCALVERSION=-tkg-${_cpusched} bzImage modules 2>&1 ) 3>&1 1>&2 2>&3 )

  if [ -n "$_runtime" ]; then
    printf "compilation time : \n$_runtime"
  fi
}

do_install() {
	local arch subarch _args hdrdest

  	echo "Installing modules..."
  	make INSTALL_MOD_PATH="$DESTDIR" modules_install

  	hdrdest=${DESTDIR}/usr/src/kernel-headers-${_kernver}

  	vinstall .config 644 boot config-${_kernver}
  	vinstall System.map 644 boot System.map-${_kernver}
  	vinstall arch/x86/boot/bzImage 644 boot vmlinuz-${_kernver}

	# Switch to /usr.
        vmkdir usr
        mv ${DESTDIR}/lib ${DESTDIR}/usr

	
        cd ${DESTDIR}/usr/lib/modules/${_kernver}
        rm -f source build
        ln -sf ../../../src/kernel-headers-${_kernver} build

        cd ${wrksrc}
        # Install required headers to build external modules
        install -Dm644 Makefile ${hdrdest}/Makefile
        install -Dm644 kernel/Makefile ${hdrdest}/kernel/Makefile
        install -Dm644 .config ${hdrdest}/.config
        for file in $(find . -name Kconfig\*); do
                mkdir -p ${hdrdest}/$(dirname $file)
                install -Dm644 $file ${hdrdest}/${file}
        done
        for file in $(find arch/${subarch:-$arch} -name module.lds -o -name Kbuild.platforms -o -name Platform); do
                mkdir -p ${hdrdest}/$(dirname $file)
                install -Dm644 $file ${hdrdest}/${file}
        done
        mkdir -p ${hdrdest}/include
        # Remove firmware stuff provided by the "linux-firmware" pkg.
        rm -rf ${DESTDIR}/usr/lib/firmware

        for i in acpi asm-generic clocksource config crypto drm generated linux \
                math-emu media net pcmcia scsi sound trace uapi vdso video xen dt-bindings; do
                if [ -d include/$i ]; then
                        cp -a include/$i ${hdrdest}/include
                fi
        done

	cd ${wrksrc}
        mkdir -p ${hdrdest}/arch/x86
        cp -a arch/x86/include ${hdrdest}/arch/x86

	# Copy files necessary for later builds, like nvidia and vmware

	 cp Module.symvers ${hdrdest}
        cp -a scripts ${hdrdest}
        mkdir -p ${hdrdest}/security/selinux
        cp -a security/selinux/include ${hdrdest}/security/selinux
        mkdir -p ${hdrdest}/tools/include
        cp -a tools/include/tools ${hdrdest}/tools/include

        mkdir -p ${hdrdest}/arch/x86/kernel
        cp arch/x86/Makefile ${hdrdest}/arch/x86
        mkdir -p ${hdrdest}/arch/x86/kernel
        cp arch/x86/kernel/asm-offsets.s ${hdrdest}/arch/x86/kernel

	 # add headers for lirc package
        # pci
        for i in bt8xx cx88 saa7134; do
                mkdir -p ${hdrdest}/drivers/media/pci/${i}
                cp -a drivers/media/pci/${i}/*.h ${hdrdest}/drivers/media/pci/${i}
        done
        # usb
        for i in cpia2 em28xx pwc; do
                mkdir -p ${hdrdest}/drivers/media/usb/${i}
                cp -a drivers/media/usb/${i}/*.h ${hdrdest}/drivers/media/usb/${i}
        done
        # i2c
        mkdir -p ${hdrdest}/drivers/media/i2c
        cp drivers/media/i2c/*.h ${hdrdest}/drivers/media/i2c
        for i in cx25840; do
                mkdir -p ${hdrdest}/drivers/media/i2c/${i}
                cp -a drivers/media/i2c/${i}/*.h ${hdrdest}/drivers/media/i2c/${i}
        done

        # Add md headers
        mkdir -p ${hdrdest}/drivers/md
        cp drivers/md/*.h ${hdrdest}/drivers/md

        # Add inotify.h
        mkdir -p ${hdrdest}/include/linux
        cp include/linux/inotify.h ${hdrdest}/include/linux

        # Add wireless headers
	mkdir -p ${hdrdest}/net/mac80211/
        cp net/mac80211/*.h ${hdrdest}/net/mac80211

        # add dvb headers for external modules
        mkdir -p ${hdrdest}/include/config/dvb/
        cp include/config/dvb/*.h ${hdrdest}/include/config/dvb/

        # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
        mkdir -p ${hdrdest}/drivers/media/dvb-frontends
        cp drivers/media/dvb-frontends/lgdt330x.h \
                ${hdrdest}/drivers/media/dvb-frontends/
        cp drivers/media/i2c/msp3400-driver.h ${hdrdest}/drivers/media/i2c/

        # add dvb headers
        mkdir -p ${hdrdest}/drivers/media/usb/dvb-usb
        cp drivers/media/usb/dvb-usb/*.h ${hdrdest}/drivers/media/usb/dvb-usb/
        mkdir -p ${hdrdest}/drivers/media/dvb-frontends
        cp drivers/media/dvb-frontends/*.h ${hdrdest}/drivers/media/dvb-frontends/
        mkdir -p ${hdrdest}/drivers/media/tuners
        cp drivers/media/tuners/*.h ${hdrdest}/drivers/media/tuners/

        # Add xfs and shmem for aufs building
        mkdir -p ${hdrdest}/fs/xfs/libxfs
        mkdir -p ${hdrdest}/mm
        cp fs/xfs/libxfs/xfs_sb.h ${hdrdest}/fs/xfs/libxfs/xfs_sb.h

	 # Add objtool binary, needed to build external modules with dkms
        mkdir -p ${hdrdest}/tools/objtool
        cp tools/objtool/objtool ${hdrdest}/tools/objtool

	# Remove unneeded architectures
        for arch in alpha avr32 blackfin cris frv h8300 \
                ia64 m* s* um v850 xtensa "arm* p*"; do
                rm -rf ${hdrdest}/arch/${arch}
        done

	# Keep arch/x86/ras/Kconfig as it is needed by drivers/ras/Kconfig
        mkdir -p ${hdrdest}/arch/x86/ras
        cp -a arch/x86/ras/Kconfig ${hdrdest}/arch/x86/ras/Kconfig

	 # Extract debugging symbols and compress modules
        msg_normal "$pkgver: extracting debug info and compressing modules, please wait...\n"
        install -Dm644 vmlinux ${DESTDIR}/usr/lib/debug/boot/vmlinux-${_kernver}
        (
        cd ${DESTDIR}
        export DESTDIR
        find ./ -name '*.ko' -print0 | \
                xargs -0r -n1 -P ${XBPS_MAKEJOBS} ${FILESDIR}/mv-debug
        )
        # ... and run depmod again.
        depmod -b ${DESTDIR}/usr -F System.map ${_kernver}
}

linux57-tkg-bmq-dbg_package() {
   	preserve=yes
        nostrip=yes
        noverifyrdeps=yes
        noshlibprovides=yes
        repository=debug
        short_desc+=" - debugging symbols"
        pkg_install() {
                vmove usr/lib/debug
        }
}

linux57-tkg-bmq-headers_package() {
  short_desc+="Headers and scripts for building modules for the $pkgdesc kernel"
  nostrip=yes
  preserve=yes
  noshlibprovides=yes
  pkg_install() {
	vmove /usr/src
	vmove /usr/lib/modules/${_kernver}/build
  }
}
